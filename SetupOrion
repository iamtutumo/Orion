#!/bin/bash
####################################################

versao() {
echo -e "\e[97mComunidade: https://chat.whatsapp.com/Ky7uW2hUIf7DfPbIDugKS5                \e[97mVersão do Setup \e[32mv.2.4.1\e[0m"
}

####################################################

## Cores do Setup

amarelo="\e[33m"
verde="\e[32m"
branco="\e[97m"
bege="\e[93m"
vermelho="\e[91m"
reset="\e[0m"

####################################################

## Data location for upcoming installations
home_directory="$HOME"
#file="/root/dados_vps/dados_vps"
arquivo="${home_directory}/dados_vps/dados_vps"

dados() {
    nome_servidor=$(grep "Server Name:" "$arquivo" | awk -F': ' '{print $2}')
    nome_rede_interna=$(grep "Internal network:" "$arquivo" | awk -F': ' '{print $2}')
}

####################################################

## Setup License

direitos_instalador() {
    echo -e "$amarelo===================================================================================================\e[0m"
    echo -e "$amarelo=                                                                                                 =\e[0m"
    echo -e "$amarelo=  $branco This self-installer was developed to assist in the installation of the main applications $amarelo  =\e[0m"
    echo -e "$amarelo=  $branco  available on the open source market. I already give all the credits to the developers of each  $amarelo  =\e[0m"
    echo -e "$amarelo=  $branco application available here. This Setup is licensed under the MIT License (MIT). You can use,$amarelo =\e[0m"
    echo -e "$amarelo=  $branco  copy, modify, integrate, publish, distribute and/or sell copies of the final products,  $amarelo  =\e[0m"
    echo -e "$amarelo=  $branco  but you must always declare that OrionDesign (contato@oriondesign.art.br) is the original author  $amarelo  =\e[0m"
    echo -e "$amarelo=  $branco          of these codes and assign a link to https://oriondesign.art.br/setup           $amarelo  =\e[0m"
    echo -e "$amarelo=                                                                                                 =\e[0m"
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo ""
    read -p "By typing Y you accept and agree with the instructions given above (Y/N): " choice
    if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then
        return
    else
        echo "Too bad you don't agree, so I'll be closing the installer. Until later."
        sleep 2
        clear
        exit 1
    fi
}

## Credito do Setup

creditos_msg() {
    echo ""
    echo ""
    echo -e "$amarelo===================================================================================================\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo=          $branco  Would you like to contribute to continue the development of this project?            $amarelo=\e[0m"
    echo -e "$amarelo=          $branco                You can make a donation via PIX:                                $amarelo=\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo=                                      pix@oriondesign.art.br                                     $amarelo=\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo=          $branco          If you need help/mentoring or want to leave feedback                   $amarelo=\e[0m"
    echo -e "$amarelo=          $branco          Our community:$amarelo https://discord.gg/ZvtmFtMt82                         $amarelo=\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo=          $branco               or via WhatsApp (SetupOrion community)                           $amarelo=\e[0m"
    echo -e "$amarelo=          $amarelo               https://chat.whatsapp.com/LvqP8e7lNPn9Y3QMbbnhfB                        $amarelo=\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo ""
}


####################################################

## General messages

## Message asking to fill in the information

preencha_as_info() {
    echo -e "$amarelo===================================================================================================\e[0m"
    echo -e "$amarelo=                                                                                                 $amarelo=\e[0m"






  echo -e "$amarelo=      $branco  ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝   $amarelo      =\e[0m"
  echo -e "$amarelo=                                                                                                 =\e[0m"
  echo -e "$amarelo===================================================================================================\e[0m"
  echo ""
  echo ""
}

## Error message

erro_msg() {
   echo -e "$amarelo===================================================================================================\e[0m"
   echo -e "$amarelo=                                                                                                 =\e[0m"
   echo -e "$amarelo=                                 $branco███████╗██████╗ ██████╗  ██████╗                                $amarelo=\e[0m"
   echo -e "$amarelo=                                 $branco██╔════╝██╔══██╗██╔══██╗██╔═══██╗                               $amarelo=\e[0m"
   echo -e "$amarelo=                                 $branco█████╗  ██████╔╝██████╔╝██║   ██║                               $amarelo=\e[0m"
   echo -e "$amarelo=                                 $branco██╔══╝  ██╔══██╗██╔══██╗██║   ██║                               $amarelo=\e[0m"
   echo -e "$amarelo=                                 $branco███████╗██║  ██║██║  ██║╚██████╔╝                               $amarelo=\e[0m"
   echo -e "$amarelo=                                 $branco╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝                                $amarelo=\e[0m"
   echo -e "$amarelo=                                                                                                 =\e[0m"
   echo -e "$amarelo===================================================================================================\e[0m"
}

##  Installed Message

instalado_msg() {
    clear
    echo ""
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo -e "$branco     ██╗      ██╗███╗   ██╗███████╗████████╗ █████╗ ██╗      █████╗ ██████╗  ██████╗       ██╗\e[0m"
    echo -e "$branco     ╚██╗     ██║████╗  ██║██╔════╝╚══██╔══╝██╔══██╗██║     ██╔══██╗██╔══██╗██╔═══██╗     ██╔╝\e[0m"
    echo -e "$branco     ██╔╝     ██║██║ ╚████║███████║   ██║   ██║  ██║███████╗██║  ██║██████╔╝╚██████╔╝     ╚██╗\e[0m"
    echo -e "$amarelo===================================================================================================\e[0m"
    echo ""
    echo ""
}

##  Testing Message

nome_testando() {
  clear
  echo ""
  echo -e "$branco               ████████╗███████╗███████╗████████╗ █████╗ ███╗   ██╗██████╗  ██████╗ \e[0m"
  echo -e "$branco               ╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██╔══██╗████╗  ██║██╔══██╗██╔═══██╗\e[0m"
  echo -e "$branco                  ██║   █████╗  ███████╗   ██║   ███████║██╔██╗ ██║██║  ██║██║   ██║\e[0m"
  echo -e "$branco                  ██║   ██╔══╝  ╚════██║   ██║   ██╔══██║██║╚██╗██║██║  ██║██║   ██║\e[0m"
  echo -e "$branco                  ██║   ███████╗███████║   ██║   ██║  ██║██║ ╚████║██████╔╝╚██████╔╝\e[0m"
  echo -e "$branco                  ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═══╝╚═════╝  ╚═════╝ \e[0m"
  echo ""
  echo ""
}

####################################################

##  Titles

##  Installer name

nome_instalador() {
    clear
    echo ""
    echo -e "$branco       ███████╗███████╗████████╗██╗   ██╗██████╗      ██████╗ ██████╗ ██╗ ██████╗ ███╗   ██╗\e[0m"
    echo -e "$branco       ██╔════╝██╔════╝╚══██╔══╝██║   ██║██╔══██╗    ██╔═══██╗██╔══██╗██║██╔═══██╗████╗  ██║\e[0m"
    echo -e "$branco       ███████╗█████╗     ██║   ██║   ██║██████╔╝    ██║   ██║██████╔╝██║██║   ██║██╔██╗ ██║\e[0m"
    echo -e "$branco       ╚════██║██╔══╝     ██║   ██║   ██║██╔═══╝     ██║   ██║██╔══██╗██║██║   ██║██║╚██╗██║\e[0m"
    echo -e "$branco       ███████║███████╗   ██║   ╚██████╔╝██║         ╚██████╔╝██║  ██║██║╚██████╔╝██║ ╚████║\e[0m"
    echo -e "$branco       ╚══════╝╚══════╝   ╚═╝    ╚═════╝ ╚═╝          ╚═════╝ ╚═╝  ╚═╝╚═╝ ╚═════╝ ╚═╝  ╚═══╝\e[0m"
    echo -e "$branco                                                                                            \e[0m"
    echo -e "$branco                                        ██╗   ██╗  ██████╗                                  \e[0m"
    echo -e "$branco                              █████╗    ██║   ██║   █████╔╝    █████╗                       \e[0m"
    echo -e "$branco                              ╚════╝    ╚██╗ ██╔╝  ██╔═══╝     ╚════╝                       \e[0m"





  echo -e "$branco                        ██║   ██╔══╝  ╚════██║   ██║   ██╔══╝      ██║  ██║██╔══╝  \e[0m"




    echo -e "$branco              ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██║    ██║██╔═══██╗██╔═══██╗╚══██╔══╝\e[0m"
    echo -e "$branco              ██║     ██╔══██║██╔══██║   ██║   ██║███╗██║██║   ██║██║   ██║   ██║   \e[0m"
    echo -e "$branco              ╚██████╗██║  ██║██║  ██║   ██║   ╚███╔███╔╝╚██████╔╝╚██████╔╝   ██║   \e[0m"
    echo -e "$branco               ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝    ╚══╝╚══╝  ╚═════╝  ╚═════╝    ╚═╝   \e[0m"
    echo ""
    echo ""
}

## Titulo Evolution [3]

nome_evolution() {
    clear
    echo ""
    echo -e "$branco ███████╗██╗   ██╗ ██████╗ ██╗     ██╗   ██╗████████╗██╗ ██████╗ ███╗   ██╗     █████╗ ██████╗ ██╗\e[0m"
    echo -e "$branco ██╔════╝██║   ██║██╔═══██╗██║     ██║   ██║╚══██╔══╝██║██╔═══██╗████╗  ██║    ██╔══██╗██╔══██╗██║\e[0m"
    echo -e "$branco █████╗  ██║   ██║██║   ██║██║     ██║   ██║   ██║   ██║██║   ██║██╔██╗ ██║    ███████║██████╔╝██║\e[0m"
    echo -e "$branco ██╔══╝  ╚██╗ ██╔╝██║   ██║██║     ██║   ██║   ██║   ██║██║   ██║██║╚██╗██║    ██╔══██║██╔═══╝ ██║\e[0m"
    echo -e "$branco ███████╗ ╚████╔╝ ╚██████╔╝███████╗╚██████╔╝   ██║   ██║╚██████╔╝██║ ╚████║    ██║  ██║██║     ██║\e[0m"
    echo -e "$branco ╚══════╝  ╚═══╝   ╚═════╝ ╚══════╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝    ╚═╝  ╚═╝╚═╝     ╚═╝\e[0m"
    echo ""
    echo ""                                                                                        
}

## Title Mini [4]

nome_minio() {
    clear
    echo ""
    echo -e "$branco                              ███╗   ███╗██╗███╗   ██╗██╗ ██████╗ \e[0m"
    echo -e "$branco                              ████╗ ████║██║████╗  ██║██║██╔═══██╗\e[0m"
    echo -e "$branco                              ██╔████╔██║██║██╔██╗ ██║██║██║   ██║\e[0m"
    echo -e "$branco                              ██║╚██╔╝██║██║██║╚██╗██║██║██║   ██║\e[0m"
    echo -e "$branco                              ██║ ╚═╝ ██║██║██║ ╚████║██║╚██████╔╝\e[0m"
    echo -e "$branco                              ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝╚═╝ ╚═════╝ \e[0m"
    echo ""                                   
}

## Title Typebot

nome_typebot() {
    clear
    echo ""
    echo -e "$branco                    ████████╗██╗   ██╗██████╗ ███████╗██████╗  ██████╗ ████████╗\e[0m"
    echo -e "$branco                    ╚══██╔══╝╚██╗ ██╔╝██╔══██╗██╔════╝██╔══██╗██╔═══██╗╚══██╔══╝\e[0m"
    echo -e "$branco                       ██║     ╚██╔╝  ██╔═══╝ ██╔══╝  ██╔══██╗██║   ██║   ██║   \e[0m"
    echo -e "$branco                       ██║      ██║   ██║     ███████╗██████╔╝╚██████╔╝   ██║   \e[0m"
    echo -e "$branco                       ╚═╝      ╚═╝   ╚═╝     ╚══════╝╚═════╝  ╚═════╝    ╚═╝   \e[0m"
    echo ""
    echo ""                                                    
}

## Title N8N [6]

nome_n8n() {
    clear
    echo ""
    echo -e "$branco                            ███╗   ██╗ █████╗ ███╗   ██╗\e[0m"
    echo -e "$branco                            ████╗  ██║██╔══██╗████╗  ██║\e[0m"
    echo -e "$branco                            ██╔██╗ ██║╚█████╔╝██╔██╗ ██║\e[0m"
    echo -e "$branco                            ██║╚██╗██║██╔══██╗██║╚██╗██║\e[0m"
    echo -e "$branco                            ██║ ╚████║╚█████╔╝██║ ╚████║\e[0m"
    echo -e "$branco                            ╚═╝  ╚═══╝ ╚════╝ ╚═╝  ╚═══╝\e[0m"
    echo ""
    echo ""                     
}

## Titulo Flowise [7]

nome_flowise() {
    clear
    echo ""
    echo -e "$branco                      ███████╗██╗      ██████╗ ██╗    ██╗██╗███████╗███████╗\e[0m"
    echo -e "$branco                      ██╔════╝██║     ██╔═══██╗██║    ██║██║██╔════╝██╔════╝\e[0m"
    echo -e "$branco                      █████╗  ██║     ██║   ██║██║ █╗ ██║██║███████╗█████╗  \e[0m"
    echo -e "$branco                      ██╔══╝  ██║     ██║   ██║██║███╗██║██║╚════██║██╔══╝  \e[0m"
    echo -e "$branco                      ██║     ███████╗╚██████╔╝╚███╔███╔╝██║███████║███████╗\e[0m"
    echo -e "$branco                      ╚═╝     ╚══════╝ ╚═════╝  ╚══╝╚══╝ ╚═╝╚══════╝╚══════╝\e[0m"
    echo ""
    echo ""
}

## Titulo PgAdmin [8]

nome_pgAdmin_4() {
    clear
    echo ""
    echo -e "$branco               ██████╗  ██████╗  █████╗ ██████╗ ███╗   ███╗██╗███╗   ██╗    ██╗  ██╗\e[0m"
    echo -e "$branco               ██████╔╝██║  ███╗███████║██║  ██║██╔████╔██║██║██╔██╗ ██║    ███████║\e[0m"
    echo -e "$branco               ██╔═══╝ ██║   ██║██╔══██║██║  ██║██║╚██╔╝██║██║██║╚██╗██║    ╚════██║\e[0m"
    echo -e "$branco               ██║     ╚██████╔╝██║  ██║██████╔╝██║ ╚═╝ ██║██║██║ ╚████║         ██║\e[0m"
    echo -e "$branco               ╚═╝      ╚═════╝ ╚═╝  ╚═╝╚═════╝ ╚═╝     ╚═╝╚═╝╚═╝  ╚═══╝         ╚═╝\e[0m"
    echo ""
    echo ""                                                                  
}

## Titulo Nocobase [9]

nome_nocobase() {
    clear
    echo -e "$branco               ███╗   ██╗ ██████╗  ██████╗ ██████╗ ██████╗  █████╗ ███████╗███████╗\e[0m"






    echo -e "$branco                      ██████╔╝██║  ██║███████║███████╗██║  ██║╚██████╔╝╚███╔███╔╝\e[0m"
    echo -e "$branco                      ╚═════╝ ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝  ╚═╝ ╚═════╝  ╚══╝╚══╝ \e[0m"
    echo ""
    echo ""                                                          
}

## Titulo MongoDB [13]

nome_mongodb() {
  clear
  echo ""
  echo -e "$branco               ███╗   ███╗ ██████╗ ███╗   ██╗ ██████╗  ██████╗     ██████╗ ██████╗ \e[0m"
  echo -e "$branco               ████╗ ████║██╔═══██╗████╗  ██║██╔════╝ ██╔═══██╗    ██╔══██╗██╔══██╗\e[0m"
  echo -e "$branco               ██╔████╔██║██║   ██║██╔██╗ ██║██║  ███╗██║   ██║    ██║  ██║██████╔╝\e[0m"
  echo -e "$branco               ██║╚██╔╝██║██║   ██║██║╚██╗██║██║   ██║██║   ██║    ██║  ██║██╔══██╗\e[0m"
  echo -e "$branco               ██║ ╚═╝ ██║╚██████╔╝██║ ╚████║╚██████╔╝╚██████╔╝    ██████╔╝██████╔╝\e[0m"
  echo -e "$branco               ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═══╝ ╚═════╝  ╚═════╝     ╚═════╝ ╚═════╝ \e[0m"
  echo ""
  echo ""                                                               
}

## Titulo RabbitMQ [14]

nome_rabbitmq() {
  clear
  echo ""
  echo -e "$branco               ██████╗  █████╗ ██████╗ ██████╗ ██╗████████╗    ███╗   ███╗ ██████╗ \e[0m"
  echo -e "$branco               ██╔══██╗██╔══██╗██╔══██╗██╔══██╗██║╚══██╔══╝    ████╗ ████║██╔═══██╗\e[0m"
  echo -e "$branco               ██████╔╝███████║██████╔╝██████╔╝██║   ██║       ██╔████╔██║██║   ██║\e[0m"
  echo -e "$branco               ██╔══██╗██╔══██║██╔══██╗██╔══██╗██║   ██║       ██║╚██╔╝██║██║▄▄ ██║\e[0m"
  echo -e "$branco               ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚═════╝ ╚═╝   ╚═╝       ╚═╝     ╚═╝ ╚══▀▀═╝ \e[0m"
  echo ""
  echo ""                                                                 
}


nome_uptimekuma() {
  clear
  echo ""
  echo -e "$branco      ██╗   ██╗██████╗ ████████╗██╗███╗   ███╗███████╗    ██╗  ██╗██╗   ██╗███╗   ███╗ █████╗ \e[0m"
  echo -e "$branco      ██║   ██║██╔══██╗╚══██╔══╝██║████╗ ████║██╔════╝    ██║ ██╔╝██║   ██║████╗ ████║██╔══██╗\e[0m"
  echo -e "$branco      ██║   ██║██████╔╝   ██║   ██║██╔████╔██║█████╗      █████╔╝ ██║   ██║██╔████╔██║███████║\e[0m"
  echo -e "$branco      ╚██████╔╝██║        ██║   ██║██║ ╚═╝ ██║███████╗    ██║  ██╗╚██████╔╝██║ ╚═╝ ██║██║  ██║\e[0m"
  echo -e "$branco       ╚═════╝ ╚═╝        ╚═╝   ╚═╝╚═╝     ╚═╝╚══════╝    ╚═╝  ╚═╝ ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝\e[0m"
  echo ""
  echo ""

## Titulo Calcom [16]

nome_calcom() {
  clear
  echo ""
  echo -e "$branco                       ██████╗ █████╗ ██╗         ██████╗ ██████╗ ███╗   ███╗\e[0m"
  echo -e "$branco                      ██╔════╝██╔══██╗██║        ██╔════╝██╔═══██╗████╗ ████║\e[0m"
  echo -e "$branco                      ██║     ███████║██║        ██║     ██║   ██║██╔████╔██║\e[0m"
  echo -e "$branco                      ██║     ██╔══██║██║        ██║     ██║   ██║██║╚██╔╝██║\e[0m"
  echo -e "$branco                      ╚██████╗██║  ██║███████╗██╗╚██████╗╚██████╔╝██║ ╚═╝ ██║\e[0m"
  echo -e "$branco                       ╚═════╝╚═╝  ╚═╝╚══════╝╚═╝ ╚═════╝ ╚═════╝ ╚═╝     ╚═╝\e[0m"
  echo ""
  echo ""
}

## Titulo Mautic [17]

nome_mautic(){
    clear
    echo ""
    echo -e "$branco                         ███╗   ███╗ █████╗ ██╗   ██╗████████╗██╗ ██████╗\e[0m"
    echo -e "$branco                         ████╗ ████║██╔══██╗██║   ██║╚══██╔══╝██║██╔════╝\e[0m"
    echo -e "$branco                         ██╔████╔██║███████║██║   ██║   ██║   ██║██║     \e[0m"
    echo -e "$branco                         ██║╚██╔╝██║██╔══██║██║   ██║   ██║   ██║██║     \e[0m"
    echo -e "$branco                         ██║ ╚═╝ ██║██║  ██║╚██████╔╝   ██║   ██║╚██████╗\e[0m"
    echo -e "$branco                         ╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝\e[0m"
    echo ""
    echo ""                                              
}

## Titulo Appsmith [18]

    echo -e "$branco                  ██╔══██╗██╔══██╗██╔══██╗██╔════╝████╗ ████║██║╚══██╔══╝██║  ██║\e[0m"
    echo -e "$branco                  ███████║██████╔╝██████╔╝███████╗██╔████╔██║██║   ██║   ███████║\e[0m"
    echo -e "$branco                  ██╔══██║██╔═══╝ ██╔═══╝ ╚════██║██║╚██╔╝██║██║   ██║   ██╔══██║\e[0m"
    echo -e "$branco                  ██║  ██║██║     ██║     ███████║██║ ╚═╝ ██║██║   ██║   ██║  ██║\e[0m"
    echo -e "$branco                  ╚═╝  ╚═╝╚═╝     ╚═╝     ╚══════╝╚═╝     ╚═╝╚═╝   ╚═╝   ╚═╝  ╚═╝\e[0m"
    echo ""
    echo ""
}

## Titulo Qdrant [19]

nome_qdrant() {
    clear
    echo ""
    echo -e "$branco                        ██████╗ ██████╗ ██████╗  █████╗ ███╗   ██╗████████╗\e[0m"
    echo -e "$branco                       ██║▄▄ ██║██║  ██║██╔══██╗██╔══██║██║╚██╗██║   ██║   \e[0m"
    echo -e "$branco                       ╚██████╔╝██████╔╝██║  ██║██║  ██║██║ ╚████║   ██║   \e[0m"
    echo -e "$branco                        ╚══▀▀═╝ ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   \e[0m"
    echo ""
    echo ""
}

## Titulo WoofedCRM [20]

nome_woofedcrm() {
    clear
    echo ""
    echo -e "$branco        ██╗    ██╗ ██████╗  ██████╗ ███████╗███████╗██████╗      ██████╗██████╗ ███╗   ███╗\e[0m"
    echo -e "$branco        ██║    ██║██╔═══██╗██╔═══██╗██╔════╝██╔════╝██╔══██╗    ██╔════╝██╔══██╗████╗ ████║\e[0m"
    echo -e "$branco        ██║ █╗ ██║██║   ██║██║   ██║█████╗  █████╗  ██║  ██║    ██║     ██████╔╝██╔████╔██║\e[0m"
    echo -e "$branco        ██║███╗██║██║   ██║██║   ██║██╔══╝  ██╔══╝  ██║  ██║    ██║     ██╔══██╗██║╚██╔╝██║\e[0m"
    echo -e "$branco        ╚███╔███╔╝╚██████╔╝╚██████╔╝██║     ███████╗██████╔╝    ╚██████╗██║  ██║██║ ╚═╝ ██║\e[0m"
    echo -e "$branco         ╚══╝╚══╝  ╚═════╝  ╚═════╝ ╚═╝     ╚══════╝╚═════╝      ╚═════╝╚═╝  ╚═╝╚═╝     ╚═╝\e[0m"
    echo ""
    echo ""
}

## Titulo Formbricks [21]

nome_formbricks() {
    clear
    echo ""
    echo -e "$branco          ███████╗ ██████╗ ██████╗ ███╗   ███╗██████╗ ██████╗ ██╗ ██████╗██╗  ██╗███████╗\e[0m"
    echo -e "$branco          █████╗  ██║   ██║██████╔╝██╔████╔██║██████╔╝██████╔╝██║██║     █████╔╝ ███████╗\e[0m"
    echo -e "$branco          ██╔══╝  ██║   ██║██╔══██╗██║╚██╔╝██║██╔══██╗██╔══██╗██║██║     ██╔═██╗ ╚════██║\e[0m"
    echo -e "$branco          ██║     ╚██████╔╝██║  ██║██║ ╚═╝ ██║██████╔╝██║  ██║██║╚██████╗██║  ██╗███████║\e[0m"
    echo -e "$branco          ╚═╝      ╚═════╝ ╚═╝  ╚═╝╚═╝     ╚═╝╚═════╝ ╚═╝  ╚═╝╚═╝ ╚═════╝╚═╝  ╚═╝╚══════╝\e[0m"
    echo ""
    echo ""
}

nome_nocodb() {
    clear
    echo ""
    echo -e "$branco                       ███╗   ██╗ ██████╗  ██████╗ ██████╗ ██████╗ ██████╗ \e[0m"
    echo -e "$branco                       ████╗  ██║██╔═══██╗██╔════╝██╔═══██╗██╔══██╗██╔══██╗\e[0m"
    echo -e "$branco                       ██╔██╗ ██║██║   ██║██║     ██║   ██║██║  ██║██████╔╝\e[0m"
    echo -e "$branco                       ██║╚██╗██║██║   ██║██║     ██║   ██║██║  ██║██╔══██╗\e[0m"
    echo -e "$branco                       ██║ ╚████║╚██████╔╝╚██████╗╚██████╔╝██████╔╝██████╔╝\e[0m"






    echo -e "$branco                            ██║  ██║██║█████╗   ╚████╔╝ ███████║██║\e[0m"
    echo -e "$branco                            ██████╔╝██║██║        ██║██╗██║  ██║██║\e[0m"
    echo -e "$branco                            ╚═════╝ ╚═╝╚═╝        ╚═╝╚═╝╚═╝  ╚═╝╚═╝\e[0m"
    echo ""
    echo ""
}

## Titulo Ollama

nome_ollama() {
    clear
    echo ""
    echo -e "$branco                            ██████╗ ██╗     ██╗      █████╗ ███╗   ███╗ █████╗ \e[0m"
    echo -e "$branco                           ██╔═══██╗██║     ██║     ██╔══██╗████╗ ████║██╔══██╗\e[0m"
    echo -e "$branco                           ██║   ██║██║     ██║     ███████║██╔████╔██║███████║\e[0m"
    echo -e "$branco                           ██║   ██║██║     ██║     ██╔══██║██║╚██╔╝██║██╔══██║\e[0m"


    echo -e "$branco                         █████╗ ███████╗███████╗██╗███╗   ██╗███████╗\e[0m"
    echo -e "$branco                        ██╔══██╗██╔════╝██╔════╝██║████╗  ██║██╔════╝\e[0m"
    echo -e "$branco                        ███████║█████╗  █████╗  ██║██╔██╗ ██║█████╗  \e[0m"
    echo -e "$branco                        ██╔══██║██╔══╝  ██╔══╝  ██║██║╚██╗██║██╔══╝  \e[0m"
    echo -e "$branco                        ██║  ██║██║     ██║     ██║██║ ╚████║███████╗\e[0m"
    echo -e "$branco                        ╚═╝  ╚═╝╚═╝     ╚═╝     ╚═╝╚═╝  ╚═══╝╚══════╝\e[0m"
    echo ""
    echo ""
}

nome_docuseal(){
    clear
    echo ""
    echo -e "$branco                ██████╗  ██████╗  ██████╗██╗   ██╗███████╗███████╗ █████╗ ██╗     \e[0m"
    echo -e "$branco                ██╔══██╗██╔═══██╗██╔════╝██║   ██║██╔════╝██╔════╝██╔══██╗██║     \e[0m"
    echo -e "$branco                ██║  ██║██║   ██║██║     ██║   ██║███████╗█████╗  ███████║██║     \e[0m"
    echo -e "$branco                ██║  ██║██║   ██║██║     ██║   ██║╚════██║██╔══╝  ██╔══██║██║     \e[0m"
    echo -e "$branco                ██████╔╝╚██████╔╝╚██████╗╚██████╔╝███████║███████╗██║  ██║███████╗\e[0m"
    echo -e "$branco                ╚═════╝  ╚═════╝  ╚═════╝ ╚═════╝ ╚══════╝╚══════╝╚═╝  ╚═╝╚══════╝\e[0m"
    echo ""
    echo ""
}

nome_directus(){
clear
echo ""
echo -e "$branco                   ██████╗ ██╗██████╗ ███████╗ ██████╗████████╗██╗   ██╗███████╗\e[0m"
echo -e "$branco                   ██╔══██╗██║██╔══██╗██╔════╝██╔════╝╚══██╔══╝██║   ██║██╔════╝\e[0m"
echo -e "$branco                   ██║  ██║██║██╔══██╗██╔══╝  ██║        ██║   ██║   ██║╚════██║\e[0m"
echo -e "$branco                   ██████╔╝██║██║  ██║███████╗╚██████╗   ██║   ╚██████╔╝███████║\e[0m"
echo -e "$branco                   ╚═════╝ ╚═╝╚═╝  ╚═╝╚══════╝ ╚═════╝   ╚═╝    ╚═════╝ ╚══════╝\e[0m"
echo ""
echo ""
}

nome_vaultwarden() {
    clear
    echo ""
    echo -e "$branco   ██║   ██║██╔══██╗██║   ██║██║  ╚══██╔══╝██║    ██║██╔══██╗██╔══██╗██╔══██╗██╔════╝████╗  ██║\e[0m"
    echo -e "$branco   ██║   ██║███████║██║   ██║██║     ██║   ██║ █╗ ██║███████║██████╔╝██║  ██║█████╗  ██╔██╗ ██║\e[0m"
    echo -e "$branco   ╚██╗ ██╔╝██╔══██║██║   ██║██║     ██║   ██║███╗██║██╔══██║██╔══██╗██║  ██║██╔══╝  ██║╚██╗██║\e[0m"
    echo -e "$branco    ╚████╔╝ ██║  ██║╚██████╔╝███████╗██║   ╚███╔███╔╝██║  ██║██║  ██║██████╔╝███████╗██║ ╚████║\e[0m"
    echo -e "$branco     ╚═══╝  ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝    ╚══╝╚══╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝  ╚═══╝\e[0m"
    echo ""
    echo ""
}

nome_monitor() {
    clear
    echo ""
    echo -e "$branco                     ██████╗ ██████╗  █████╗ ███████╗ █████╗ ███╗   ██╗ █████╗ \e[0m"
    echo -e "$branco                    ██╔════╝ ██╔══██╗██╔══██╗██╔════╝██╔══██╗████╗  ██║██╔══██╗\e[0m"
    echo -e "$branco                    ██║  ███╗██████╔╝███████║█████╗  ███████║██╔██╗ ██║███████║\e[0m"
    echo -e "$branco                    ██║   ██║██╔══██╗██╔══██║██╔══╝  ██╔══██║██║╚██╗██║██╔══██║\e[0m"
    echo -e "$branco                    ╚██████╔╝██║  ██║██║  ██║██║     ██║  ██║██║ ╚████║██║  ██║\e[0m"
    echo -e "$branco                     ╚═════╝ ╚═╝  ╚═╝╚═╝  ╚═╝╚═╝     ╚═╝  ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝\e[0m"
    echo ""
    echo ""
}

nome_nextcloud() {
    clear
    echo ""
    echo -e "$branco           ███╗   ██╗███████╗██╗  ██╗████████╗ ██████╗██╗      ██████╗ ██╗   ██╗██████╗ \e[0m"
    echo -e "$branco           ████╗  ██║██╔════╝╚██╗██╔╝╚══██╔══╝██╔════╝██║     ██╔═══██╗██║   ██║██╔══██╗\e[0m"
    echo -e "$branco           ██╔██╗ ██║█████╗   ╚███╔╝    ██║   ██║     ██║     ██║   ██║██║   ██║██║  ██║\e[0m"
    echo -e "$branco           ██║╚██╗██║██╔══╝   ██╔██╗    ██║   ██║     ██║     ██║   ██║██║   ██║██║  ██║\e[0m"
    echo -e "$branco           ██║ ╚████║███████╗██╔╝ ██╗   ██║   ╚██████╗███████╗╚██████╔╝╚██████╔╝██████╔╝\e[0m"
    echo -e "$branco           ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═╝   ╚═╝    ╚═════╝╚══════╝ ╚═════╝  ╚═════╝ ╚═════╝ \e[0m"
    echo ""
    echo ""
}

nome_saindo() {
    clear
    echo -e "$branco                ███████╗ █████╗ ██╗███╗   ██╗██████╗  ██████╗     ██████╗  ██████╗ \e[0m"




    echo -e "$branco                           ███████╗   ██║   ███████║██║     █████╔╝             \e[0m"
    echo -e "$branco                           ███████║   ██║   ██║  ██║╚██████╗██║  ██╗            \e[0m"
    echo -e "$branco                           ╚══════╝   ╚═╝   ╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝            \e[0m"
    echo ""
    echo -e "$amarelo===================================================================================================\e[0m"


    echo -e "$branco   ╚═╝   ╚═╝  ╚═╝ ╚═════╝  ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝    ╚══════╝ ╚═════╝  ╚═════╝  ╚═════╝ ╚══════╝\e[0m"
    echo -e "$branco   ██████╗  ██████╗      ██████╗██╗  ██╗ █████╗ ████████╗██╗    ██╗ ██████╗  ██████╗ ████████╗      \e[0m"
    echo -e "$branco   ██╔══██╗██╔═══██╗    ██╔════╝██║  ██║██╔══██╗╚══██╔══╝██║    ██║██╔═══██╗██╔═══██╗╚══██╔══╝      \e[0m"
    echo -e "$branco   ██║  ██║██║   ██║    ██║     ███████║███████║   ██║   ██║ █╗ ██║██║   ██║██║   ██║   ██║         \e[0m"
    echo -e "$branco   ██║  ██║██║   ██║    ██║     ██╔══██║██╔══██║   ██║   ██║███╗██║██║   ██║██║   ██║   ██║         \e[0m"
    echo -e "$branco   ██████╔╝╚██████╔╝    ╚██████╗██║  ██║██║  ██║   ██║   ╚███╔███╔╝╚██████╔╝╚██████╔╝   ██║         \e[0m"
    echo -e "$branco   ╚═════╝  ╚═════╝      ╚═════╝╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝    ╚══╝╚══╝  ╚═════╝  ╚═════╝    ╚═╝         \e[0m"
    echo ""
    echo ""
}

nome_finalizado() {
    clear
    echo ""
    echo -e "$branco             ███████╗██╗███╗   ██╗ █████╗ ██╗     ██╗███████╗ █████╗ ██████╗  ██████╗ \e[0m"
    echo -e "$branco             ██╔════╝██║████╗  ██║██╔══██╗██║     ██║╚══███╔╝██╔══██╗██╔══██╗██╔═══██╗\e[0m"
    echo -e "$branco             █████╗  ██║██╔██╗ ██║███████║██║     ██║  ███╔╝ ███████║██║  ██║██║   ██║\e[0m"
    echo -e "$branco             ██╔══╝  ██║██║╚██╗██║██╔══██║██║     ██║ ███╔╝  ██╔══██║██║  ██║██║   ██║\e[0m"
    echo -e "$branco             ██║     ██║██║ ╚████║██║  ██║███████╗██║███████╗██║  ██║██████╔╝╚██████╔╝\e[0m"
    echo -e "$branco             ╚═╝     ╚═╝╚═╝  ╚═══╝╚═╝  ╚═╝╚══════╝╚═╝╚══════╝╚═╝  ╚═╝╚═════╝  ╚═════╝ \e[0m"
    echo ""
    echo ""
}

####################################################

## Options menu

menu_instalador(){
    echo ""
    echo -e "${amarelo}[ 0 ]${reset} -  ${branco}Testar SMTP                             ${verde}| ${reset}  ${amarelo}[ 21 ]${reset} - ${branco}Formbricks${reset}"
    echo -e "${amarelo}[ 2 ]${reset} -  ${branco}Chatwoot                                ${verde}| ${reset}  ${amarelo}[ 23 ]${reset} - ${branco}Langfuse${reset}"
    echo -e "${branco}  '-->${amarelo}[ 2.1 ]${reset} - ${branco}Chatwoot (ARM)                   ${verde}| ${reset}  ${amarelo}[ 24 ]${reset} - ${branco}Metabase${reset}"
    echo -e "${branco}  '-->${amarelo}[ 3.1 ]${reset} - ${branco}Evolution API (ARM)              ${verde}| ${reset}  ${amarelo}[ 26 ]${reset} - ${branco}Chatwoot Nestor (ft. Francis)${reset}"
    echo -e "${amarelo}[ 4 ]${reset} -  ${branco}MinIO                                   ${verde}| ${reset}  ${amarelo}[ 27 ]${reset} - ${branco}Uno API${reset}"
    echo -e "${amarelo}[ 5 ]${reset} -  ${branco}Typebot                                 ${verde}| ${reset}  ${amarelo}[ 28 ]${reset} - ${branco}N8N + Nodes Quepasa${reset}"
    echo -e "${amarelo}[ 6 ]${reset} -  ${branco}N8N                                     ${verde}| ${reset}  ${amarelo}[ 29 ]${reset} - ${branco}Quepasa API${reset}"
    echo -e "${amarelo}[ 7 ]${reset} -  ${branco}Flowise                                 ${verde}| ${reset}  ${amarelo}[ 30 ]${reset} - ${branco}Docuseal${reset}"
    echo -e "${amarelo}[ 8 ]${reset} -  ${branco}PgAdmin 4                               ${verde}| ${reset}  ${amarelo}[ 31 ]${reset} - ${branco}Grafana + Prometheus + cAdvisor${reset}"
    echo -e "${amarelo}[ 9 ]${reset} -  ${branco}Nocobase                                ${verde}| ${reset}  ${amarelo}[ 32 ]${reset} - ${branco}Dify AI${reset}"
    echo -e "${amarelo}[ 10 ]${reset} - ${branco}Botpress                                ${verde}| ${reset}  ${amarelo}[ 33 ]${reset} - ${branco}Ollama${reset}"
    echo -e "${amarelo}[ 11 ]${reset} - ${branco}Wordpress                               ${verde}| ${reset}  ${amarelo}[ 34 ]${reset} - ${branco}Affine${reset}"
    echo -e "${amarelo}[ 12 ]${reset} - ${branco}Baserow                                 ${verde}| ${reset}  ${amarelo}[ 35 ]${reset} - ${branco}Directus${reset}"
    echo -e "${amarelo}[ 13 ]${reset} - ${branco}MongoDB                                 ${verde}| ${reset}  ${amarelo}[ 36 ]${reset} - ${branco}VaultWarden${reset}"
    echo -e "${amarelo}[ 14 ]${reset} - ${branco}RabbitMQ                                ${verde}| ${reset}  ${amarelo}[ 37 ]${reset} - ${branco}NextCloud${reset}"
    echo -e "${amarelo}[ 15 ]${reset} - ${branco}Uptime Kuma                             ${verde}| ${reset}  ${amarelo}[ 38 ]${reset} - ${branco}Strapi ${amarelo}[IMPLEMENTANDO]${reset}"
    echo -e "${amarelo}[ 16 ]${reset} - ${branco}Cal.com                                 ${verde}| ${reset}  ${amarelo}[ 39 ]${reset} - ${branco}REMOVER STACK${reset}"














































































    if docker service ls --filter "name=chatwoot_nestor" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}


wait_evolution() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=evolution" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_typebot() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=typebot" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_minio() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=minio" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_n8n() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=n8n" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_n8n_quepasa() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=n8n_quepasa" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_flowise() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=flowise" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

    echo "Este processo pode demorar um pouco, se passar de 10 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=pgadmin" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5










}

wait_rabbitmq() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=rabbit" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_uptimekuma() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=uptime" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_calcom() {
    echo "Este processo pode demorar um pouco, se passar de 10 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=calcom" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_mautic() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=mautic" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_appsmith() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=appsmith" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_qdrant() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=qdrant" | grep "1/1"; then
        sleep 10
    fi

    sleep 5
done
}

wait_woofedcrm() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=woofedcrm_woofedcrm" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_formbricks() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=formbricks" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_nocodb() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=nocobase" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_langfuse() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=langfuse" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_metabase() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=metabase" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_odoo() {
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
while true; do
    # Verifica se o serviço chatwoot está ativo
    if docker service ls --filter "name=odoo" | grep "1/1"; then
        sleep 10
        break
    fi

    sleep 5
done
}

wait_unoapi(){
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
        # Verifica se o serviço chatwoot está ativo
        if docker service ls --filter "name=unoapi_unoapi" | grep "1/1"; then
            sleep 10
            break
        fi
    
        sleep 5
    done
}

wait_quepasa(){
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
    while true; do
        # Verifica se o serviço chatwoot está ativo
        if docker service ls --filter "name=quepasa" | grep "1/1"; then
            sleep 10
            break
        fi
    
        sleep 5
    done
}

wait_dify(){
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
    while true; do
        # Verifica se o serviço chatwoot está ativo
        if docker service ls --filter "name=dify" | grep "1/1"; then
            sleep 10
            break
        fi
    
        sleep 5
    done
}

wait_ollama(){
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
    while true; do
        # Verifica se o serviço chatwoot está ativo
        if docker service ls --filter "name=ollama" | grep "1/1"; then
            sleep 10
            break
        fi
    
        sleep 5
    done
}

wait_affine(){
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
    while true; do
        # Verifica se o serviço chatwoot está ativo
        if docker service ls --filter "name=affine" | grep "1/1"; then
            sleep 10
            break
        fi
    
        sleep 5
    done
}

wait_docuseal(){
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
    while true; do
        # Verifica se o serviço chatwoot está ativo
        if docker service ls --filter "name=docuseal" | grep "1/1"; then
            sleep 10
            break
        fi
    
        sleep 5
    done
}

wait_directus(){
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
    while true; do
        # Verifica se o serviço chatwoot está ativo
        if docker service ls --filter "name=directus" | grep "1/1"; then
            sleep 10
            break
        fi
    
        sleep 5
    done
}

wait_vaultwarden(){
    echo "Este processo pode demorar um pouco, se passar de 10 minutos cancele... por que deu ruim..."
    while true; do
        # Verifica se o serviço chatwoot está ativo
        if docker service ls --filter "name=vaultwarden" | grep "1/1"; then
            sleep 30
            break
        fi
    
        sleep 5
    done
}

wait_monitor(){
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
    while true; do
        # Verifica se o serviço chatwoot está ativo
        if docker service ls --filter "name=monitor" | grep "1/1"; then
            sleep 10
            break
        fi
    
        sleep 5
    done
}

wait_nextcloud(){
    echo "Este processo pode demorar um pouco, se passar de 5 minutos cancele... por que deu ruim..."
    while true; do
        # Verifica se o serviço chatwoot está ativo
        if docker service ls --filter "name=nextcloud" | grep "1/1"; then
            sleep 10
            break
        fi
    
        sleep 5
    done
}
####################################################

## Pegar informações


## Pegar senha Postgres

pegar_senha_postgres() {
    while :; do
        if [ -f /root/postgres.yaml ]; then
            senha_postgres=$(grep "POSTGRES_PASSWORD" /root/postgres.yaml | awk -F '=' '{print $2}')
            break
        else
            sleep 5
        fi
    done
}

pegar_user_senha_rabbitmq() {
    while :; do
        if [ -f /root/rabbitmq.yaml ]; then
            user_rabbit_mqs=$(grep "RABBITMQ_DEFAULT_USER" /root/rabbitmq.yaml | awk -F ': ' '{print $2}')
            senha_rabbit_mqs=$(grep "RABBITMQ_DEFAULT_PASS" /root/rabbitmq.yaml | awk -F ': ' '{print $2}')
            break
        else
            sleep 5
            echo "erro"
        fi
    done
}

## Pegar senha Mysql

pegar_senha_mysql() {
    while :; do
        if [ -f /root/mysql.yaml ]; then
        fi
    done
}

## Pegar senha Minio

pegar_senha_minio() {
    user_minio=$(grep "MINIO_ROOT_USER" /root/minio.yaml | awk -F '=' '{print $2}')
    senha_minio=$(grep "MINIO_ROOT_PASSWORD" /root/minio.yaml | awk -F '=' '{print $2}')
    url_minio=$(grep "MINIO_BROWSER_REDIRECT_URL" /root/minio.yaml | awk -F '=' '{print $2}' | sed 's/https:\/\///')
    url_s3=$(grep "MINIO_SERVER_URL" /root/minio.yaml | awk -F '=' '{print $2}' | sed 's/https:\/\///')
}

## Pegar link S3

pegar_link_s3() {
    url_s3=$(grep "MINIO_SERVER_URL" /root/minio.yaml | awk -F '=' '{print $2}' | sed 's/https:\/\///')
}

####################################################

## Criadores de banco de dados Postgres

## Criar banco do Chatwoot
criar_banco_postgres_chatwoot() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "chatwoot"

            if [ $? -eq 0 ]; then
                echo "O banco de dados chatwoot já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS chatwoot;"
                    echo "Banco de dados chatwoot apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE chatwoot;"
                    
                    echo "Banco de dados chatwoot criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE chatwoot;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "chatwoot"

                    echo "Banco de dados chatwoot criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

## Criar banco do Chatwoot_UNO
criar_banco_postgres_chatwoot_uno() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "chatwoot_uno"

            if [ $? -eq 0 ]; then
                echo "O banco de dados chatwoot_uno já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS chatwoot_uno;"
                    echo "Banco de dados chatwoot_uno apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE chatwoot_uno;"
                    
                    echo "Banco de dados chatwoot_uno criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE chatwoot_uno;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "chatwoot_uno"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados chatwoot_uno criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

criar_banco_postgres_chatwoot_nestor() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "chatwoot_nestor"

            if [ $? -eq 0 ]; then
                echo "O banco de dados chatwoot_nestor já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS chatwoot_nestor;"
                    echo "Banco de dados chatwoot_nestor apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE chatwoot_nestor;"
                    
                    echo "Banco de dados chatwoot_nestor criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE chatwoot_nestor;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "chatwoot_nestor"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados chatwoot_nestor criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

## Criar banco do N8N
criar_banco_postgres_n8n_queue() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "n8n_queue"

            if [ $? -eq 0 ]; then
                echo "O banco de dados n8n_queue já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS n8n_queue;"
                    echo "Banco de dados n8n_queue apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE n8n_queue;"
                    
                    echo "Banco de dados n8n_queue criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE n8n_queue;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "n8n_queue"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados n8n_queue criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

## Criar banco do N8N_Quepasa
criar_banco_postgres_n8n_quepasa() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "n8n_quepasa"

            if [ $? -eq 0 ]; then
                echo "O banco de dados n8n_quepasa já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS n8n_quepasa;"
                    echo "Banco de dados n8n_quepasa apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE n8n_quepasa;"
                    
                    echo "Banco de dados n8n_quepasa criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE n8n_quepasa;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "n8n_quepasa"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados n8n_quepasa criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

## Criar banco do Typebot
criar_banco_postgres_typebot() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "typebot"

            if [ $? -eq 0 ]; then
                echo "O banco de dados typebot já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS typebot;"
                    echo "Banco de dados typebot apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE typebot;"
                    
                    echo "Banco de dados typebot criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE typebot;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "typebot"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados typebot criado com sucesso."
                    break
                else
                fi
            fi
        fi
    done
}

## Criar banco de Flowise
criar_banco_postgres_flowise() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "flowise"

            if [ $? -eq 0 ]; then
                echo "O banco de dados flowise já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS flowise;"
                    echo "Banco de dados flowise apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE flowise;"
                    
                    echo "Banco de dados flowise criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE flowise;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "flowise"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados flowise criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

## Criar banco do Nocobase
criar_banco_postgres_nocobase() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "nocobase"

            if [ $? -eq 0 ]; then

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS nocobase;"
                    echo "Banco de dados nocobase apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE nocobase;"
                    
                    # Conceder privilégios ao usuário postgres
                    docker exec "$CONTAINER_ID" psql -U postgres -d nocobase -c "GRANT ALL PRIVILEGES ON DATABASE nocobase TO postgres;"
                    
                    echo "Banco de dados nocobase criado com sucesso e permissões concedidas."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE nocobase;"
                
                # Conceder privilégios ao usuário postgres
                docker exec "$CONTAINER_ID" psql -U postgres -d nocobase -c "GRANT ALL PRIVILEGES ON DATABASE nocobase TO postgres;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "nocobase"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados nocobase criado com sucesso e permissões concedidas."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

## Criar banco do Botpress
criar_banco_postgres_botpress() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "botpress"

            if [ $? -eq 0 ]; then
                echo "O banco de dados botpress já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                    
                    
                





                    
                    
                    echo "Banco de dados calcom criado com sucesso."
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE calcom;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "calcom"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados calcom criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

## Criar banco do WoofedCRM
criar_banco_postgres_woofedcrm() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "woofedcrm"

            if [ $? -eq 0 ]; then
                echo "O banco de dados woofedcrm já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS woofedcrm;"
                    echo "Banco de dados woofedcrm apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE woofedcrm;"
                    
                    echo "Banco de dados woofedcrm criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE woofedcrm;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "woofedcrm"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados woofedcrm criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

## Criar banco do Formbricks
criar_banco_postgres_formbricks() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "formbricks"

            if [ $? -eq 0 ]; then
                echo "O banco de dados formbricks já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS formbricks;"
                    echo "Banco de dados formbricks apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE formbricks;"
                    
                    echo "Banco de dados formbricks criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE formbricks;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "formbricks"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados formbricks criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}


## Criar banco do NocoDB
criar_banco_postgres_nocodb() {
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "nocodb"

            if [ $? -eq 0 ]; then
                echo "O banco de dados nocodb já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS nocodb;"
                    echo "Banco de dados nocodb apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE nocodb;"
                    
                    echo "Banco de dados nocodb criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE nocodb;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "nocodb"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados nocodb criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

## Criar banco do Langfuse
criar_banco_postgres_langfuse() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "langfuse"

            if [ $? -eq 0 ]; then
                echo "O banco de dados langfuse já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS langfuse;"
                    
                    
                





                    
                    
                





                    
                    
                

        else
    done
}

criar_banco_postgres_affine() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "affine"

            if [ $? -eq 0 ]; then
                echo "O banco de dados affine já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS affine;"
                    echo "Banco de dados affine apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE affine;"
                    
                    echo "Banco de dados affine criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE affine;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "affine"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados affine criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

criar_banco_postgres_docuseal() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "docuseal"

            if [ $? -eq 0 ]; then
                echo "O banco de dados docuseal já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS docuseal;"
                    echo "Banco de dados docuseal apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE docuseal;"
                    
                    echo "Banco de dados docuseal criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE docuseal;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "docuseal"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados docuseal criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

criar_banco_postgres_directus() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "directus"

            if [ $? -eq 0 ]; then
                echo "O banco de dados directus já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS directus;"
                    echo "Banco de dados directus apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE directus;"
                    
                    echo "Banco de dados directus criado com sucesso."
                else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE directus;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "directus"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados directus criado com sucesso."
                    break
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi
            fi
        else
            sleep 5
        fi
    done
}

criar_banco_postgres_nextcloud() {
    while :; do
        if docker ps -q --filter "name=postgres" | grep -q .; then
            CONTAINER_ID=$(docker ps -q --filter "name=postgres")

            # Verificar se o banco de dados já existe
            docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "nextcloud"

            if [ $? -eq 0 ]; then
                echo "O banco de dados nextcloud já existe."

                read -p "Deseja apagar e criar um novo banco de dados? (Y/N): " resposta
                if [ "$resposta" == "Y" ] || [ "$resposta" == "y" ]; then
                    # Apagar o banco de dados
                    docker exec "$CONTAINER_ID" psql -U postgres -c "DROP DATABASE IF EXISTS nextcloud;"
                    echo "Banco de dados nextcloud apagado com sucesso."
                    
                    # Criar o banco de dados novamente
                    docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE nextcloud;"
                    
                    echo "Banco de dados nextcloud criado com sucesso."
                else
                    echo "Usando o banco de dados existente."
                fi
                break
            else
                # Criar o banco de dados
                docker exec "$CONTAINER_ID" psql -U postgres -c "CREATE DATABASE nextcloud;"
                
                # Verificar novamente se o banco de dados foi criado com sucesso
                docker exec "$CONTAINER_ID" psql -U postgres -lqt | cut -d \| -f 1 | grep -qw "nextcloud"

                if [ $? -eq 0 ]; then
                    echo "Banco de dados nextcloud criado com sucesso."
                else
                    echo "Erro ao criar o banco de dados. Tentando novamente..."
                fi







        else
        fi
    done
}


####################################################

## Instalação das Ferramentas

## ████████╗███████╗███████╗████████╗███████╗    ███████╗███╗   ███╗████████╗██████╗ 
## ╚══██╔══╝██╔════╝██╔════╝╚══██╔══╝██╔════╝    ██╔════╝████╗ ████║╚══██╔══╝██╔══██╗
##    ██║   █████╗  ███████╗   ██║   █████╗      ███████╗██╔████╔██║   ██║   ██████╔╝
##    ██║   ██╔══╝  ╚════██║   ██║   ██╔══╝      ╚════██║██║╚██╔╝██║   ██║   ██╔═══╝ 
##    ██║   ███████╗███████║   ██║   ███████╗    ███████║██║ ╚═╝ ██║   ██║   ██║     
##    ╚═╝   ╚══════╝╚══════╝   ╚═╝   ╚══════╝    ╚══════╝╚═╝     ╚═╝   ╚═╝   ╚═╝     
                                                                                  
ferramenta_testeemail() {
clear
dados
nome_testeemail
preencha_as_info

while true; do

echo -en "\e[33mDigite o endereço de Email (ex: contato@oriondesign.art.br): \e[0m" && read -r email_teste
echo ""

echo -e "\e[97mPasso$amarelo 2/5\e[0m"
echo -e "$amarelo--> Caso não tiver um usuario do email, use o proprio email abaixo"
echo -en "\e[33mDigite o usuário de Email (ex: oriondesign ou contato@oriondesign.art.br): \e[0m" && read -r user_teste
echo ""

echo -e "\e[97mPasso$amarelo 3/5\e[0m"
echo -e "$amarelo--> Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app"
echo -en "\e[33mDigite a Senha do email (ex: @Senha123_): \e[0m" && read -r senha_teste
echo ""

echo -e "\e[97mPasso$amarelo 4/5\e[0m"
echo -en "\e[33mDigite o Host Smtp (ex: smtp.hostinger.com): \e[0m" && read -r host_teste
echo ""

echo -e "\e[97mPasso$amarelo 5/5\e[0m"
echo -en "\e[33mDigite a Porta Smtp (ex: 465): \e[0m" && read -r porta_teste
echo ""

clear
nome_testeemail
conferindo_as_info

echo -e "\e[33mEmail:\e[97m $email_teste\e[0m"
echo ""

echo -e "\e[33mUsuário:\e[97m $user_teste\e[0m"
echo ""

echo -e "\e[33mSenha:\e[97m $senha_teste\e[0m"
echo ""

echo -e "\e[33mHost:\e[97m $host_teste\e[0m"
echo ""

echo -e "\e[33mPorta:\e[97m $porta_teste\e[0m"
echo ""

read -p "As respostas estão corretas? (Y/N): " confirmacao
if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then
    clear
    nome_testando
    break
else
    clear
    nome_testeemail
    preencha_as_info
fi
done

#MENSAGEM DE INICIANDO (PASSOS)
echo -e "\e[97m• INICIANDO VERIFICAÇÃO \e[33m[1/3]\e[0m"












    echo -e "\e[97mPasso$amarelo 1/4\e[0m"
    echo -en "\e[33mDigite o Dominio para o Portainer (ex: portainer.oriondesign.art.br): \e[0m" && read -r url_portainer
    echo ""

    ## Pergunta o Nome do Servidor
    echo -e "\e[97mPasso$amarelo 2/4\e[0m"
    echo -e "$amarelo--> Não pode conter Espaços e/ou cartacteres especiais, exceto Underline_"
    echo -en "\e[33mEscolha um nome para o seu servidor (ex: OrionDesign): \e[0m" && read -r nome_servidor
    echo ""
    
    ## Pergunta o nome da Rede Interna
    echo -e "\e[97mPasso$amarelo 3/4\e[0m"
    echo -e "$amarelo--> Não pode conter Espaços e/ou cartacteres especiais, exceto Underline_"
    echo -en "\e[33mDigite um nome para sua rede interna (ex: OrionNet): \e[0m" && read -r nome_rede_interna
    echo ""
    
    ## Pergunta o Email para informações sobre o certificado
    echo -e "\e[97mPasso$amarelo 4/4\e[0m"
    echo -en "\e[33mDigite um endereço de Email válido (ex: contato@oriondesign.art.br): \e[0m" && read -r email_ssl
    echo ""

    ## Limpa o termianl
    clear

    ## Mostra o nome da aplicação
    nome_traefik_e_portainer

    ## Mostra mensagem para verificar as informações
    conferindo_as_info

    ## Informação sobre URL
    echo -e "\e[33mLink do Portainer:\e[97m $url_portainer\e[0m"
    echo ""

    ## Informação sobre Nome do Servidor
    echo -e "\e[33mNome do Servidor:\e[97m $nome_servidor\e[0m"
    echo ""

    ## Informação sobre Nome da Rede interna
    echo -e "\e[33mRede interna:\e[97m $nome_rede_interna\e[0m"
    echo ""

    ## Informação sobre Email
    echo -e "\e[33mEmail:\e[97m $email_ssl\e[0m"
    echo ""
    echo ""

    ## Pergunta se as respostas estão corretas
    read -p "As respostas estão corretas? (Y/N): " confirmacao
    if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then

        ## Digitou Y para confirmar que as informações estão corretas

        ## Limpar o terminal
        clear

        ## Mostrar mensagem de Instalando
        instalando_msg

        ## Sai do Loop
        break
    else

        ## Digitou N para dizer que as informações não estão corretas.

        ## Limpar o terminal
        clear

        ## Mostra o nome da ferramenta
        nome_traefik_e_portainer

        ## Mostra mensagem para preencher informações
        preencha_as_info

    ## Volta para o inicio do loop com as perguntas
    fi
done

## Mensagem de Passo
echo -e "\e[97m• STARTING TRAEFIK INSTALLATION \e[33m[1/8]\e[0m"
echo ""
sleep 1

##In this step we will be saving the data filled in previously so that the installer can use it later when installing any tool.

## Ensures that the user is in /root/
cd
cd

## Checks if a folder called "dados_vps" doesn't already exist, if it exists it ignores it and if it doesn't exist it creates one
## This was a PR that came from user Fabio => https://github.com/hipnologo

if [ ! -d "dados_vps" ]; then
    mkdir dados_vps
fi

## End of PR

## Open the vps_data folder
cd dados_vps

## Create a file called "vps_data" with: "server name", "internal network name", "email", "portainer link"
cat > dados_vps << EOL
[DADOS DA VPS]

This data was filled in when you installed Traefik and Portainer and
will be used to perform installations on SetupOrion v.2

Server Name: $nome_servidor

Internal network: $nome_rede_interna

Email para SSL: $email_ssl

Link do Portainer: $url_portainer

Thank you for using our AutoInstaller.
If this content was useful, be sure to support our project.

pix@oriondesign.art.br

Drink water!
EOL

## Volta para /root/
cd
cd

## Ativa a função dados para pegar os dados da vps
dados

## Mensagem de Passo
echo -e "\e[97m• UPDATING AND CONFIGURING THE VPS \e[33m[2/8]\e[0m"
echo ""
sleep 1

## Neste passo vamos estar Atualizando e configurando a vps para conseguir rodar nosso setup

## Todos os passo que estão com "> /dev/null 2>&1" São para não mostrar os logs.

## Fiz isso com o intuito de melhorar a visualização deixando o terminal apenas com os passos pré descritos

## Vou adicionar uma verificação com echo e o passo caso der algum problema para verificar.

sudo apt-get update > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "1/9 - [ OK ]"
else
    echo "1/9 - [ OFF ]"
fi
sudo apt upgrade -y > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "2/9 - [ OK ]"
else
    echo "2/9 - [ OFF ]"
fi
sudo timedatectl set-timezone America/Sao_Paulo > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "3/9 - [ OK ]"
else
    echo "3/9 - [ OFF ]"
sudo apt-get install -y apt-utils > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "4/9 - [ OK ]"
else
    echo "4/9 - [ OFF ]"
fi
sudo apt-get update > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "5/9 - [ OK ]"
else
    echo "5/9 - [ OFF ]"
fi
hostnamectl set-hostname $nome_servidor > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "6/9 - [ OK ]"
else
    echo "6/9 - [ OFF ]"
fi
sudo sed -i "s/127.0.0.1[[:space:]]localhost/127.0.0.1 $nome_servidor/g" /etc/hosts > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "7/9 - [ OK ]"
else
    echo "7/9 - [ OFF ]"
fi
sudo apt-get update > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "8/9 - [ OK ]"
else
    echo "8/9 - [ OFF ]"
fi
if [ $? -eq 0 ]; then
    echo "9/9 - [ OK ]"
else
    echo "9/9 - [ OFF ]"
fi
echo ""

## Mensagem de Passo
echo -e "\e[97m• INSTALANDO DOCKER SWARM \e[33m[3/8]\e[0m"
echo ""
sleep 1

## Nesse passo vamos estar instalando docker no modo swarm


ip=$(curl -s ifconfig.me)
if [ $? -eq 0 ]; then
    echo "1/3 - [ OK ]"
else
    echo "1/3 - [ OFF ]"
fi
curl -fsSL https://get.docker.com | bash > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "2/3 - [ OK ]"
else
    echo "2/3 - [ OFF ]"
fi
docker swarm init --advertise-addr $ip > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "3/3 - [ OK ]"
else
    echo "3/3 - [ OFF ]"
fi
echo ""

## Mensagem de Passo
echo -e "\e[97m• CRIANDO REDE INTERNA \e[33m[4/8]\e[0m"
echo ""
sleep 1

## In this step we will create the internal network to use in other applications

docker network create --driver=overlay $nome_rede_interna > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "1/1 - [ OK ]"
else
    echo "1/1 - [ OFF ]"
fi
echo ""

 ## Step Message
echo -e "\e[97m• INSTALANDO TRAEFIK \e[33m[5/8]\e[0m"
echo ""
sleep 1

## In this step we will be creating the traefik Stack yaml in the /root/ folder
## This will allow the user to edit it later

## Then we will install traefik and check if everything is ok.

## Criando a stack
version: "3.7"

services:

    command:
      - "--api.dashboard=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=$nome_rede_interna" ## Internal network name
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencryptresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.letsencryptresolver.acme.storage=/etc/traefik/letsencrypt/acme.json"
      - "--certificatesresolvers.letsencryptresolver.acme.email=$email_ssl" ## Email to receive notifications
      - "--log.level=DEBUG"
      - "--log.format=common"
      - "--log.filePath=/var/log/traefik/traefik.log"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access-log"
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.middlewares.redirect-https.redirectscheme.scheme=https"
        - "traefik.http.middlewares.redirect-https.redirectscheme.permanent=true"
        - "traefik.http.routers.http-catchall.rule=Host(\`{host:.+}\`)"
        - "traefik.http.routers.http-catchall.entrypoints=web"
        - "traefik.http.routers.http-catchall.middlewares=redirect-https@docker"
        - "traefik.http.routers.http-catchall.priority=1"
    volumes:
      - "vol_certificates:/etc/traefik/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    networks:
      - $nome_rede_interna ## Nome da rede interna

volumes:

  vol_shared:
    external: true
    name: volume_swarm_shared
  vol_certificates:
    external: true
    name: volume_swarm_certificates

networks:

  $nome_rede_interna: ## Nome da rede interna
    external: true
    name: $nome_rede_interna ## Nome da rede interna
EOL
if [ $? -eq 0 ]; then
    echo "1/2 - [ OFF ]"
    echo "Ops, não foi possivel criar a stack do Traefik"
fi

docker stack deploy --prune --resolve-image always -c traefik.yaml traefik > /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "2/2 - [ OK ]"
else
    echo "2/2 - [ OFF ]"
    echo "Ops, não foi possivel subir o Traefik."
fi

## Mensagem de Passo
echo -e "\e[97m• WAITING FOR TRAEFIK TO BE ONLINE \e[33m[6/8]\e[0m"
echo ""
sleep 1

## Use the wait_traefik service to check if the service is online
wait_traefik

## Wait 30 seconds
wait_30_sec

## Step Message
echo -e "\e[97m• INSTALLING PORTAINER \e[33m[7/8]\e[0m"
sleep 1

## In this step we will be creating the Portainer Stack yaml in the /root/ folder
## This will allow the user to edit it later

## Then we will install Portainer and check if everything is ok.

## Creating the stack
cat > portainer.yaml < /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "1/2 - [ OK ]"
else
    echo "1/2 - [ OFF ]"
    echo "Oops, it was not possible to increase Portainer's stack"
fi

## Mensagem de Passo
echo -e "\e[97m• WAITING FOR PORTAINER TO BE ONLINE \e[33m[8/8]\e[0m"
echo ""
sleep 1

## Use the wait_portainer service to check if the service is online
wait_portainer

## Saving installation information within /dados_vps/
cd dados_vps

cat > dados_portainer <
     postgres.yaml <
      /dev/null 2>&1
if [ $? -eq 0 ]; then
    echo "2/2 - [ OK ]"
else
    echo "2/2 - [ OFF ]"
    echo "Ops, não foi possivel subir a stack do Postgres."
fi

## Salvando informações da instalação dentro de /dados_vps/
cd dados_vps

cat > dados_postgres <
       redis.yaml <
        dados_redis <
        
         mysql.yaml <
         
          /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Ops, não foi possivel subir a stack do Postgres." fi ## Salvando informações da instalação dentro de /dados_vps/ cd dados_vps cat > dados_mysql <
          
           Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP do Email (ex: @Senha123_): \e[0m" && read -r senha_email_chatwoot echo "" ## Pergunta o Host SMTP do email echo -e "\e[97mPasso$amarelo 4/5\e[0m" echo -en "\e[33mDigite o Host SMTP do Email (ex: smtp.hostinger.com): \e[0m" && read -r smtp_email_chatwoot echo "" ## Pergunta a porta SMTP do email echo -e "\e[97mPasso$amarelo 5/5\e[0m" echo -en "\e[33mDigite a porta SMTP do Email (ex: 465): \e[0m" && read -r porta_smtp_chatwoot ## Verifica se a porta é 465, se sim deixa o ssl true, se não, deixa false if [ "$porta_smtp_chatwoot" -eq 465 ]; then sobre_ssl=true else sobre_ssl=false fi ## Limpa o terminal clear ## Mostra o nome da aplicação nome_chatwoot ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL echo -e "\e[33mDominio do Chatwoot:\e[97m $url_chatwoot\e[0m" echo "" ## Informação sobre Nome da Empresa echo -e "\e[33mNome da Empresa:\e[97m $nome_empresa_chatwoot\e[0m" echo "" ## Informação sobre Email de SMTP echo -e "\e[33mEmail do SMTP:\e[97m $email_admin_chatwoot\e[0m" echo "" ## Informação sobre Senha de SMTP echo -e "\e[33mSenha do SMTP:\e[97m $senha_email_chatwoot\e[0m" echo "" ## Informação sobre Host SMTP echo -e "\e[33mHost SMTP:\e[97m $smtp_email_chatwoot\e[0m" echo "" ## Informação sobre Porta SMTP echo -e "\e[33mPorta SMTP:\e[97m $porta_smtp_chatwoot\e[0m" echo "" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_chatwoot ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO CHATWOOT \e[33m[1/6]\e[0m" echo "" sleep 1 ## Ativa a função dados para pegar os dados da vps dados ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES E REDIS \e[33m[2/6]\e[0m" echo "" sleep 1 ## Aqui vamos fazer uma verificação se já existe Postgres e redis instalado ## Se tiver ele vai criar um banco de dados no postgres ou perguntar se deseja apagar o que já existe e criar outro ## Verifica container postgres e cria banco no postgres verificar_container_postgres if [ $? -eq 0 ]; then pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_chatwoot else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_chatwoot fi if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" fi ## Verifica container redis verificar_container_redis if [ $? -eq 0 ]; then echo "" else ferramenta_redis > /dev/null 2>&1 fi if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO CHATWOOT \e[33m[3/6]\e[0m" echo "" sleep 1 ## Neste passo vamos estar criando a Stack yaml do Chatwoot na pasta /root/ ## Isso possibilitará que o usuario consiga edita-lo posteriormente ## Depois vamos instalar o Chatwoot e verificar se esta tudo certo. ## Criando key aleatória encryption_key=$(openssl rand -hex 16) ## Criando a stack cat > chatwoot.yaml <
           
            <$email_admin_chatwoot> ## Email SMTP - SMTP_DOMAIN=$dominio_smtp_chatwoot ## Dominio do email - SMTP_ADDRESS=$smtp_email_chatwoot ## Host SMTP - SMTP_PORT=$porta_smtp_chatwoot ## Porta SMTP - SMTP_SSL=$sobre_ssl ## Se a porta for 465 = true | Se a porta for 587 = false - SMTP_USERNAME=$email_admin_chatwoot ## Email SMTP - SMTP_PASSWORD=$senha_email_chatwoot ## Senha do SMTP - SMTP_AUTHENTICATION=login - SMTP_ENABLE_STARTTLS_AUTO=true - SMTP_OPENSSL_VERIFY_MODE=peer - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot ## Email SMTP deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager resources: limits: cpus: "1" memory: 1024M labels: - traefik.enable=true - traefik.http.routers.chatwoot_app.rule=Host(\`$url_chatwoot\`) - traefik.http.routers.chatwoot_app.entrypoints=websecure - traefik.http.routers.chatwoot_app.tls.certresolver=letsencryptresolver - traefik.http.routers.chatwoot_app.priority=1 - traefik.http.routers.chatwoot_app.service=chatwoot_app - traefik.http.services.chatwoot_app.loadbalancer.server.port=3000 - traefik.http.services.chatwoot_app.loadbalancer.passhostheader=true - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https - traefik.http.routers.chatwoot_app.middlewares=sslheader@docker chatwoot_sidekiq: image: chatwoot/chatwoot:latest command: bundle exec sidekiq -C config/sidekiq.yml volumes: - chatwoot_data:/app/storage ## Diretório dos arquivos de conversa - chatwoot_public_orion:/app ## Diretório de todos os arquivos do chatwoot networks: - $nome_rede_interna ## Nome da rede interna environment: - CHATWOOT_HUB_URL=https://oriondesign.art.br/setup - INSTALLATION_NAME=$nome_empresa_chatwoot ## Nome da empresa - NODE_ENV=production - RAILS_ENV=production - INSTALLATION_ENV=docker - SECRET_KEY_BASE=$encryption_key ## Key aleatória gerada aleatóriamente - FRONTEND_URL=https://$url_chatwoot ## Url do Chatwoot - DEFAULT_LOCALE=pt_BR - FORCE_SSL=true - ENABLE_ACCOUNT_SIGNUP=false ## false = Desativar novas inscrições no inicio | true = Ativar novas inscrições no inicio - REDIS_URL=redis://redis:6379 - POSTGRES_HOST=postgres - POSTGRES_USERNAME=postgres - POSTGRES_PASSWORD=$senha_postgres ## Senha do postgres - POSTGRES_DATABASE=chatwoot - ACTIVE_STORAGE_SERVICE=local - RAILS_LOG_TO_STDOUT=true - USE_INBOX_AVATAR_FOR_BOT=true - MAILER_SENDER_EMAIL=$email_admin_chatwoot <$email_admin_chatwoot> ## Email SMTP - SMTP_DOMAIN=$dominio_smtp_chatwoot ## Dominio do email - SMTP_ADDRESS=$smtp_email_chatwoot ## Host SMTP - SMTP_PORT=$porta_smtp_chatwoot ## Porta SMTP - SMTP_SSL=$sobre_ssl ## Se a porta for 465 = true | Se a porta for 587 = false - SMTP_USERNAME=$email_admin_chatwoot ## Email SMTP - SMTP_PASSWORD=$senha_email_chatwoot ## Senha do SMTP - SMTP_AUTHENTICATION=login - SMTP_ENABLE_STARTTLS_AUTO=true - SMTP_OPENSSL_VERIFY_MODE=peer - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot ## Email SMTP deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager resources: limits: cpus: "1" memory: 1024M volumes: chatwoot_data: external: true name: chatwoot_data chatwoot_public_orion: external: true name: chatwoot_public_orion networks: $nome_rede_interna: ## Nome da rede interna external: true name: $nome_rede_interna ## Nome da rede interna EOL if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel criar a stack do Chatwoot" fi docker stack deploy --prune --resolve-image always -c chatwoot.yaml chatwoot > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do Chatwoot" fi ## Mensagem de Passo echo -e "\e[97m• ESPERANDO SERVIÇO DO CHATWOOT ESTAR PRONTO \e[33m[4/6]\e[0m" echo "" sleep 1 ## Usa o serviço wait_chatwoot para verificar se o serviço esta online wait_chatwoot ## Mensagem de Passo echo -e "\e[97m• MIGRANDO BANCO DE DADOS \e[33m[5/6]\e[0m" echo "" sleep 1 ## Aqui vamos estar migrando o banco de dados usando o comando "bundle exec rails db:chatwoot_prepare" ## Basicamente voce poderia entrar no banco de dados do chatwoot e executar o comando por lá tambem container_name="chatwoot_chatwoot_app" max_wait_time=1200 wait_interval=60 elapsed_time=0 while [ $elapsed_time -lt $max_wait_time ]; do CONTAINER_ID=$(docker ps -q --filter "name=$container_name") if [ -n "$CONTAINER_ID" ]; then break fi sleep $wait_interval elapsed_time=$((elapsed_time + wait_interval)) done if [ -z "$CONTAINER_ID" ]; then echo "O contêiner não foi encontrado após $max_wait_time segundos." exit 1 fi docker exec -it "$CONTAINER_ID" bundle exec rails db:chatwoot_prepare if [ $? -eq 0 ]; then echo "1/1 - [ OK ]" else echo "1/1 - [ OFF ]" echo "Não foi possivel migrar o banco de dados" fi ## Mensagem de Passo echo -e "\e[97m• ATIVANDO FUNÇÕES DO SUPER ADMIN \e[33m[6/6]\e[0m" echo "" sleep 1 ## Aqui vamos alterar um dado no postgres para liberar algumas funções ocultas no painel de super admin wait_for_postgres docker exec -i $CONTAINER_ID psql -U postgres <
            
             dados_chatwoot <
             
              Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP do Email (ex: @Senha123_): \e[0m" && read -r senha_email_chatwoot echo "" ## Pergunta o Host SMTP do email echo -e "\e[97mPasso$amarelo 4/5\e[0m" echo -en "\e[33mDigite o Host SMTP do Email (ex: smtp.hostinger.com): \e[0m" && read -r smtp_email_chatwoot echo "" ## Pergunta a porta SMTP do email echo -e "\e[97mPasso$amarelo 5/5\e[0m" echo -en "\e[33mDigite a porta SMTP do Email (ex: 465): \e[0m" && read -r porta_smtp_chatwoot ## Verifica se a porta é 465, se sim deixa o ssl true, se não, deixa false if [ "$porta_smtp_chatwoot" -eq 465 ]; then sobre_ssl=true else sobre_ssl=false fi ## Limpa o terminal clear ## Mostra o nome da aplicação nome_chatwoot ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL echo -e "\e[33mDominio do Chatwoot:\e[97m $url_chatwoot\e[0m" echo "" ## Informação sobre Nome da Empresa echo -e "\e[33mNome da Empresa:\e[97m $nome_empresa_chatwoot\e[0m" echo "" ## Informação sobre Email de SMTP echo -e "\e[33mEmail do SMTP:\e[97m $email_admin_chatwoot\e[0m" echo "" ## Informação sobre Senha de SMTP echo -e "\e[33mSenha do SMTP:\e[97m $senha_email_chatwoot\e[0m" echo "" ## Informação sobre Host SMTP echo -e "\e[33mHost SMTP:\e[97m $smtp_email_chatwoot\e[0m" echo "" ## Informação sobre Porta SMTP echo -e "\e[33mPorta SMTP:\e[97m $porta_smtp_chatwoot\e[0m" echo "" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_chatwoot ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO CHATWOOT ARM \e[33m[1/6]\e[0m" echo "" sleep 1 ## Ativa a função dados para pegar os dados da vps dados ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES E REDIS \e[33m[2/6]\e[0m" echo "" sleep 1 ## Aqui vamos fazer uma verificação se já existe Postgres e redis instalado ## Se tiver ele vai criar um banco de dados no postgres ou perguntar se deseja apagar o que já existe e criar outro ## Verifica container postgres e cria banco no postgres verificar_container_postgres if [ $? -eq 0 ]; then pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_chatwoot else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_chatwoot fi if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" fi ## Verifica container redis verificar_container_redis if [ $? -eq 0 ]; then echo "" else ferramenta_redis > /dev/null 2>&1 fi if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO CHATWOOT \e[33m[3/6]\e[0m" echo "" sleep 1 ## Neste passo vamos estar criando a Stack yaml do Chatwoot na pasta /root/ ## Isso possibilitará que o usuario consiga edita-lo posteriormente ## Depois vamos instalar o Chatwoot e verificar se esta tudo certo. ## Criando key aleatória encryption_key=$(openssl rand -hex 16) ## Criando a stack cat > chatwoot.yaml <
              
               <$email_admin_chatwoot> ## Email SMTP - SMTP_DOMAIN=$dominio_smtp_chatwoot ## Dominio do email - SMTP_ADDRESS=$smtp_email_chatwoot ## Host SMTP - SMTP_PORT=$porta_smtp_chatwoot ## Porta SMTP - SMTP_SSL=$sobre_ssl ## Se a porta for 465 = true | Se a porta for 587 = false - SMTP_USERNAME=$email_admin_chatwoot ## Email SMTP - SMTP_PASSWORD=$senha_email_chatwoot ## Senha do SMTP - SMTP_AUTHENTICATION=login - SMTP_ENABLE_STARTTLS_AUTO=true - SMTP_OPENSSL_VERIFY_MODE=peer - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot ## Email SMTP deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager resources: limits: cpus: "1" memory: 1024M labels: - traefik.enable=true - traefik.http.routers.chatwoot_app.rule=Host(\`$url_chatwoot\`) - traefik.http.routers.chatwoot_app.entrypoints=websecure - traefik.http.routers.chatwoot_app.tls.certresolver=letsencryptresolver - traefik.http.routers.chatwoot_app.priority=1 - traefik.http.routers.chatwoot_app.service=chatwoot_app - traefik.http.services.chatwoot_app.loadbalancer.server.port=3000 - traefik.http.services.chatwoot_app.loadbalancer.passhostheader=true - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https - traefik.http.routers.chatwoot_app.middlewares=sslheader@docker chatwoot_sidekiq: image: sendingtk/chatwoot-arm:latest command: bundle exec sidekiq -C config/sidekiq.yml volumes: - chatwoot_data:/app/storage ## Diretório dos arquivos de conversa - chatwoot_public_orion:/app ## Diretório de todos os arquivos do chatwoot networks: - $nome_rede_interna ## Nome da rede interna environment: - CHATWOOT_HUB_URL=https://oriondesign.art.br/setup - INSTALLATION_NAME=$nome_empresa_chatwoot ## Nome da empresa - NODE_ENV=production - RAILS_ENV=production - INSTALLATION_ENV=docker - SECRET_KEY_BASE=$encryption_key ## Key aleatória gerada aleatóriamente - FRONTEND_URL=https://$url_chatwoot ## Url do Chatwoot - DEFAULT_LOCALE=pt_BR - FORCE_SSL=true - ENABLE_ACCOUNT_SIGNUP=false ## false = Desativar novas inscrições no inicio | true = Ativar novas inscrições no inicio - REDIS_URL=redis://redis:6379 - POSTGRES_HOST=postgres - POSTGRES_USERNAME=postgres - POSTGRES_PASSWORD=$senha_postgres ## Senha do postgres - POSTGRES_DATABASE=chatwoot - ACTIVE_STORAGE_SERVICE=local - RAILS_LOG_TO_STDOUT=true - USE_INBOX_AVATAR_FOR_BOT=true - MAILER_SENDER_EMAIL=$email_admin_chatwoot <$email_admin_chatwoot> ## Email SMTP - SMTP_DOMAIN=$dominio_smtp_chatwoot ## Dominio do email - SMTP_ADDRESS=$smtp_email_chatwoot ## Host SMTP - SMTP_PORT=$porta_smtp_chatwoot ## Porta SMTP - SMTP_SSL=$sobre_ssl ## Se a porta for 465 = true | Se a porta for 587 = false - SMTP_USERNAME=$email_admin_chatwoot ## Email SMTP - SMTP_PASSWORD=$senha_email_chatwoot ## Senha do SMTP - SMTP_AUTHENTICATION=login - SMTP_ENABLE_STARTTLS_AUTO=true - SMTP_OPENSSL_VERIFY_MODE=peer - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot ## Email SMTP deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager resources: limits: cpus: "1" memory: 1024M volumes: chatwoot_data: external: true name: chatwoot_data chatwoot_public_orion: external: true name: chatwoot_public_orion networks: $nome_rede_interna: ## Nome da rede interna external: true name: $nome_rede_interna ## Nome da rede interna EOL if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel criar a stack do Chatwoot" fi docker stack deploy --prune --resolve-image always -c chatwoot.yaml chatwoot > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do Chatwoot" fi ## Mensagem de Passo echo -e "\e[97m• ESPERANDO SERVIÇO DO CHATWOOT ESTAR PRONTO \e[33m[4/6]\e[0m" echo "" sleep 1 ## Usa o serviço wait_chatwoot para verificar se o serviço esta online wait_chatwoot ## Mensagem de Passo echo -e "\e[97m• MIGRANDO BANCO DE DADOS \e[33m[5/6]\e[0m" echo "" sleep 1 ## Aqui vamos estar migrando o banco de dados usando o comando "bundle exec rails db:chatwoot_prepare" ## Basicamente voce poderia entrar no banco de dados do chatwoot e executar o comando por lá tambem container_name="chatwoot_chatwoot_app" max_wait_time=1200 wait_interval=60 elapsed_time=0 while [ $elapsed_time -lt $max_wait_time ]; do CONTAINER_ID=$(docker ps -q --filter "name=$container_name") if [ -n "$CONTAINER_ID" ]; then break fi sleep $wait_interval elapsed_time=$((elapsed_time + wait_interval)) done if [ -z "$CONTAINER_ID" ]; then echo "O contêiner não foi encontrado após $max_wait_time segundos." exit 1 fi docker exec -it "$CONTAINER_ID" bundle exec rails db:chatwoot_prepare if [ $? -eq 0 ]; then echo "1/1 - [ OK ]" else echo "1/1 - [ OFF ]" echo "Não foi possivel migrar o banco de dados" fi ## Mensagem de Passo echo -e "\e[97m• ATIVANDO FUNÇÕES DO SUPER ADMIN \e[33m[6/6]\e[0m" echo "" sleep 1 ## Aqui vamos alterar um dado no postgres para liberar algumas funções ocultas no painel de super admin wait_for_postgres docker exec -i $CONTAINER_ID psql -U postgres <
               
                dados_chatwoot_arm <
                
                 evolution.yaml <
                 
                  /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack da Evolution API" fi sleep 10 ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_evolution para verificar se o serviço esta online wait_evolution cd dados_vps cat > dados_evolution <
                  
                   evolution.yaml <
                   
                    /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack da Evolution API" fi sleep 10 ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_evolution para verificar se o serviço esta online wait_evolution cd dados_vps cat > dados_evolution <
                    
                     Evite os caracteres especiais: \!#$ e/ou espaço" echo -en "\e[33mDigite um usuario para o MinIO (ex: OrionDesign): \e[0m" && read -r user_minio echo "" ##Ask Minio for Password echo -e "\e[97mPasso$amarelo 4/4\e[0m" echo -e "$amarelo--> Minimo 8 caracteres. Use Letras MAIUSCULAS e minusculas, numero e um caractere especial @ ou _" echo -e "$amarelo--> Evite os caracteres especiais: \!#$" echo -en "\e[33mDigite uma senha para o MinIO (ex: @Senha123_): \e[0m" && read -r senha_minio echo "" ## Clean the terminal clear ## Shows the application name nome_minio ## Show message to verify information conferindo_as_info ## Minio URL Information echo -e "\e[33mDominio do MinIO:\e[97m $url_minio\e[0m" echo "" ## Informação sobre URL para o S# do Minio echo -e "\e[33mDominio do S3:\e[97m $url_s3\e[0m" echo "" ## Informação sobre Usuario do Minio echo -e "\e[33mUsuario do MinIO:\e[97m $user_minio\e[0m" echo "" ## Informação sobre Senha do Minio echo -e "\e[33mSenha do MinIO:\e[97m $senha_minio\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_minio ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• STARTING THE MINIO INSTALLATION \e[33m[1/3]\e[0m" echo "" sleep 1 ## NADA ## Mensagem de Passo echo -e "\e[97m• INSTALLING MINIO \e[33m[2/3]\e[0m" echo "" sleep 1 ## Creating the stack cat > minio.yaml <
                     
                      dados_minio <
                      
                       Caso não tiver um usuario do email, use o proprio email abaixo" echo -en "\e[33mDigite o Usuário para SMTP (ex: oriondesign ou contato@oriondesign.art.br): \e[0m" && read -r usuario_email_typebot echo "" ## Pergunta a senha do SMTP echo -e "\e[97mPasso$amarelo 6/10\e[0m" echo -e "$amarelo--> Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP do Email (ex: @Senha123_): \e[0m" && read -r senha_email_typebot echo "" ## Pergunta o Host SMTP do email echo -e "\e[97mPasso$amarelo 7/10\e[0m" echo -en "\e[33mDigite o Host SMTP do Email (ex: smtp.hostinger.com): \e[0m" && read -r smtp_email_typebot echo "" ## Pergunta a porta SMTP do email echo -e "\e[97mPasso$amarelo 8/10\e[0m" echo -en "\e[33mDigite a porta SMTP do Email (ex: 465): \e[0m" && read -r porta_smtp_typebot echo "" ## Verifica se a porta é 465, se sim deixa o ssl true, se não, deixa false if [ "$porta_smtp_typebot" -eq 465 ]; then smtp_secure_typebot=true else smtp_secure_typebot=false fi ## Pergunta qual é o Access Key do minio echo -e "\e[97mPasso$amarelo 9/10\e[0m" echo -en "\e[33mAccess Key Minio: \e[0m" && read -r S3_ACCESS_KEY echo "" ## Pergunta qual é a Secret Key do minio echo -e "\e[97mPasso$amarelo 10/10\e[0m" echo -en "\e[33mSecret Key Minio: \e[0m" && read -r S3_SECRET_KEY echo "" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_typebot ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL do Builder echo -e "\e[33mDominio do Typebot Builder:\e[97m $url_typebot\e[0m" echo "" ## Informação sobre URL do Viewer echo -e "\e[33mDominio do Typebot Viewer:\e[97m $url_viewer\e[0m" echo "" ## Informação sobre a versão da ferramenta echo -e "\e[33mVersão do Typebot:\e[97m $versao_typebot\e[0m" echo "" ## Informação sobre Email echo -e "\e[33mEmail do SMTP:\e[97m $email_typebot\e[0m" echo "" ## Informação sobre Email echo -e "\e[33mUsuário do SMTP:\e[97m $usuario_email_typebot\e[0m" echo "" ## Informação sobre Senha do Email echo -e "\e[33mSenha do Email:\e[97m $senha_email_typebot\e[0m" echo "" ## Informação sobre Host SMTP echo -e "\e[33mHost SMTP do Email:\e[97m $smtp_email_typebot\e[0m" echo "" ## Informação sobre Porta SMTP echo -e "\e[33mPorta SMTP do Email:\e[97m $porta_smtp_typebot\e[0m" echo "" ## Informação sobre Secure SMTP echo -e "\e[33mSecure SMTP do Email:\e[97m $smtp_secure_typebot\e[0m" echo "" ## Informação sobre Access Key echo -e "\e[33mAccess Key Minio:\e[97m $S3_ACCESS_KEY\e[0m" echo "" ## Informação sobre Secret Key echo -e "\e[33mSecret Key Minio:\e[97m $S3_SECRET_KEY\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_typebot ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO TYPEBOT \e[33m[1/4]\e[0m" echo "" sleep 1 ## Nada nada nada.. só para aparecer a mensagem de passo.. ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/4]\e[0m" echo "" sleep 1 ## Aqui vamos fazer uma verificação se já existe Postgres e redis instalado ## Se tiver ele vai criar um banco de dados no postgres ou perguntar se deseja apagar o que já existe e criar outro ## Verifica container postgres e cria banco no postgres verificar_container_postgres if [ $? -eq 0 ]; then pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_typebot #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_typebot #> /dev/null 2>&1 fi pegar_senha_minio if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel pegar a senha do minio" fi pegar_link_s3 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel pegar o link do S3" fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO TYPEBOT \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando key Aleatória key_typebot=$(openssl rand -hex 16) ## Criando a stack cat > typebot.yaml <
                       
                        <$email_typebot> - SMTP_AUTH_DISABLED=false - SMTP_USERNAME=$usuario_email_typebot - SMTP_PASSWORD=$senha_email_typebot - SMTP_HOST=$smtp_email_typebot - SMTP_PORT=$porta_smtp_typebot - SMTP_SECURE=$smtp_secure_typebot ## Dados Google Cloud #- GOOGLE_CLIENT_ID= #- GOOGLE_CLIENT_SECRET= ## Dados do Minio/S3 - S3_ACCESS_KEY=$S3_ACCESS_KEY - S3_SECRET_KEY=$S3_SECRET_KEY - S3_BUCKET=typebot - S3_ENDPOINT=$url_s3 deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager resources: limits: cpus: "1" memory: 1024M labels: - io.portainer.accesscontrol.users=admin - traefik.enable=true - traefik.http.routers.typebot_builder.rule=Host(\`$url_typebot\`) - traefik.http.routers.typebot_builder.entrypoints=websecure - traefik.http.routers.typebot_builder.tls.certresolver=letsencryptresolver - traefik.http.services.typebot_builder.loadbalancer.server.port=3000 - traefik.http.services.typebot_builder.loadbalancer.passHostHeader=true - traefik.http.routers.typebot_builder.service=typebot_builder ################################################################################ typebot_viewer: image: baptistearno/typebot-viewer:$versao_typebot ## Versão do Typebot networks: - $nome_rede_interna ## Nome da rede interna environment: ## Dados do Postgres - DATABASE_URL=postgresql://postgres:$senha_postgres@postgres:5432/typebot ## Encryption key - ENCRYPTION_SECRET=$key_typebot ## Plano Padrão (das novas contas) - DEFAULT_WORKSPACE_PLAN=UNLIMITED ## Urls do typebot - NEXTAUTH_URL=https://$url_typebot ## URL Builder - NEXT_PUBLIC_VIEWER_URL=https://$url_viewer ## URL Viewer - NEXTAUTH_URL_INTERNAL=http://localhost:3000 ## Desativer/ativar novos cadastros - DISABLE_SIGNUP=false ## Dados do SMTP - ADMIN_EMAIL=$email_typebot ## Email SMTP - NEXT_PUBLIC_SMTP_FROM='Suporte' <$email_typebot> - SMTP_AUTH_DISABLED=false - SMTP_USERNAME=$usuario_email_typebot - SMTP_PASSWORD=$senha_email_typebot - SMTP_HOST=$smtp_email_typebot - SMTP_PORT=$porta_smtp_typebot - SMTP_SECURE=$smtp_secure_typebot ## Dados Google Cloud #- GOOGLE_CLIENT_ID= #- GOOGLE_CLIENT_SECRET= ## Dados do Minio/S3 - S3_ACCESS_KEY=$S3_ACCESS_KEY - S3_SECRET_KEY=$S3_SECRET_KEY - S3_BUCKET=typebot - S3_ENDPOINT=$url_s3 deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager resources: limits: cpus: "1" memory: 1024M labels: - io.portainer.accesscontrol.users=admin - traefik.enable=true - traefik.http.routers.typebot_viewer.rule=Host(\`$url_viewer\`) - traefik.http.routers.typebot_viewer.entrypoints=websecure - traefik.http.routers.typebot_viewer.tls.certresolver=letsencryptresolver - traefik.http.services.typebot_viewer.loadbalancer.server.port=3000 - traefik.http.services.typebot_viewer.loadbalancer.passHostHeader=true - traefik.http.routers.typebot_viewer.service=typebot_viewer networks: $nome_rede_interna: ## Nome da rede interna external: true name: $nome_rede_interna ## Nome da rede interna EOL if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel criar a stack do Typebot" fi docker stack deploy --prune --resolve-image always -c typebot.yaml typebot > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do Typebot" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_typebot para verificar se o serviço esta online wait_typebot cd dados_vps cat > dados_typebot <
                        
                         /dev/null 2>&1 criar_banco_postgres_n8n_queue #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_n8n_queue #> /dev/null 2>&1 fi ## Verifica se tem redis, se tiver, continua, se não tiver instala verificar_container_redis if [ $? -eq 0 ]; then sleep 1 else ferramenta_redis > /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO N8N \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando key Aleatória encryption_key=$(openssl rand -hex 16) ## Criando a stack cat > n8n.yaml <
                         
                          /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do N8N" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_n8n para verificar se o serviço esta online wait_n8n cd dados_vps cat > dados_n8n <
                          
                           Minimo 5 caracteres. Evite os caracteres especiais: \!#$ e/ou espaço" echo -en "\e[33mDigite um usuario para o Flowise (ex: admin): \e[0m" && read -r user_flowise echo "" ##Pergunta a Senha para a ferramenta echo -e "\e[97mPasso$amarelo 3/3\e[0m" echo -e "$amarelo--> Minimo 8 caracteres. Use Letras MAIUSCULAS e minusculas, numero e um caractere especial @ ou _" echo -e "$amarelo--> Evite os caracteres especiais: \!#$" echo -en "\e[33mDigite uma senha para o usuario (ex: @Senha123_): \e[0m" && read -r pass_flowise echo "" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_flowise ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL do Flowise echo -e "\e[33mDominio do Flowise\e[97m $url_flowise\e[0m" echo "" ## Informação sobre Usuario do Flowise echo -e "\e[33mUsuario:\e[97m $user_flowise\e[0m" echo "" ## Informação sobre a Senha do Usuario do Flowise echo -e "\e[33mSenha:\e[97m $pass_flowise\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_minio ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO FLOWISE \e[33m[1/4]\e[0m" echo "" sleep 1 ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/4]\e[0m" echo "" sleep 1 ## Já sabe né ksk verificar_container_postgres if [ $? -eq 0 ]; then sleep 1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_flowise #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_flowise #> /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO FLOWISE \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando uma Encryption Key Aleatória encryption_key=$(openssl rand -hex 16) ## Criando a stack cat > flowise.yaml <
                           
                            /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Flowise" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_flowise para verificar se o serviço esta online wait_flowise cd dados_vps cat > dados_flowise <
                            
                             Minimo 8 caracteres. Use Letras MAIUSCULAS e minusculas, numero e um caractere especial @ ou _" echo -e "$amarelo--> Evite os caracteres especiais: \!#$" echo -en "\e[33mDigite uma senha para o usuario (ex: @Senha123_): \e[0m" && read -r pass_PgAdmin_4 echo "" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_pgAdmin_4 ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL do PgAdmin echo -e "\e[33mDominio do PgAdmin 4\e[97m $url_PgAdmin_4\e[0m" echo "" ## Informação sobre email do PgAdmin echo -e "\e[33mEmail:\e[97m $user_PgAdmin_4\e[0m" echo "" ## Informação sobre a senha do PgAdmin echo -e "\e[33mSenha:\e[97m $pass_PgAdmin_4\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_minio ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO PGADMIN4 \e[33m[1/3]\e[0m" echo "" sleep 1 ## NADA ## Mensagem de Passo echo -e "\e[97m• INSTALANDO PGADMIN4 \e[33m[2/3]\e[0m" echo "" sleep 1 ## Criando a stack cat > pgadmin.yaml <
                             
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do PgAdmin 4" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_pgadmin_4 para verificar se o serviço esta online wait_pgadmin_4 cd dados_vps cat > dados_pgadmin <
                              
                              Minimo 8 caracteres. Use Letras MAIUSCULAS e minusculas, numero e um caractere especial @ ou _" echo -e "$amarelo--> Evite os caracteres especiais: \!#$" echo -en "\e[33mDigite uma senha para o usuario (ex: @Senha123_): \e[0m" && read -r pass_nocobase echo "" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_nocobase ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL do Nocobase echo -e "\e[33mDominio do Nocobase:\e[97m $url_nocobase\e[0m" echo "" ## Informação sobre Email do Nocobase echo -e "\e[33mEmail:\e[97m $mail_nocobase\e[0m" echo "" ## Informação sobre Usuario do Nocobase echo -e "\e[33mUsuario:\e[97m $user_nocobase\e[0m" echo "" ## Informação sobre Senha do Nocobase echo -e "\e[33mSenha:\e[97m $pass_nocobase\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_minio ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO NOCOBASE \e[33m[1/4]\e[0m" echo "" sleep 1 ## NADA ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/4]\e[0m" echo "" sleep 1 ## Cansei já de explicar o que isso faz kkkk verificar_container_postgres if [ $? -eq 0 ]; then sleep 1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_nocobase #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_nocobase #> /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO NOCOBASE \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando uma Encryption Key Aleatória nocobase_key=$(openssl rand -hex 16) ## Criando a stack cat > nocobase.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Nocobase" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_nocobase para verificar se o serviço esta online wait_nocobase cd dados_vps cat > dados_nocobase<
                              
                              /dev/null 2>&1 criar_banco_postgres_botpress #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_botpress #> /dev/null 2>&1 fi verificar_container_redis if [ $? -eq 0 ]; then sleep 1 else ferramenta_redis > /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO BOTPRESS \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando a stack cat > botpress.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Botpress" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_botpress para verificar se o serviço esta online wait_botpress cd dados_vps cat > dados_botpress <
                              
                              Use apenas letras minusculas, sem espaço ou caracteres especiais" echo -en "\e[33mDigite o nome do Site (ex: lojaorion): \e[0m" && read -r nome_site_wordpress echo "" ##Trata informações nome_da_stack_mysql="${nome_site_wordpress}_mysql.yaml" nome_da_stack_mysql_subir="${nome_site_wordpress}_mysql" nome_da_stack_wordpress="${nome_site_wordpress}_wordpress.yaml" nome_da_stack_wordpress_subir="${nome_site_wordpress}_wordpress" nome_do_servico_mysql="${nome_site_wordpress}_mysql" nome_da_date_mysql="${nome_site_wordpress}_mysql_data" nome_do_servico_wordpress="${nome_site_wordpress}_wordpress" nome_da_date_wordpress="${nome_site_wordpress}_data" nome_da_date_wordpress_php="${nome_site_wordpress}_php" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_wordpress ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL do Wordpress echo -e "\e[33mDominio do Wordpress:\e[97m $url_wordpress\e[0m" echo "" ## Informação sobre Nome do site echo -e "\e[33mNome do Site:\e[97m $nome_site_wordpress\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_minio ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO WORDPRESS \e[33m[1/7]\e[0m" echo "" sleep 1 ## NADA ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO REDIS \e[33m[2/7]\e[0m" echo "" sleep 1 ## Cansei já de explicar o que isso faz kkkk verificar_container_redis if [ $? -eq 0 ]; then sleep 1 else ferramenta_redis > /dev/null 2>&1 fi sleep 3 ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO MYSQL \e[33m[3/7]\e[0m" echo "" sleep 1 ## Cansei já de explicar o que isso faz kkkk verificar_container_mysql if [ $? -eq 0 ]; then pegar_senha_mysql > /dev/null 2>&1 else ferramenta_mysql > /dev/null 2>&1 pegar_senha_mysql > /dev/null 2>&1 fi ## Espera 30 segundos wait_30_sec ## Cria banco de dados do site no mysql dados criar_banco_mysql_wordpress ## Mensagem de Passo echo -e "\e[97m• INSTALANDO WORDPRESS \e[33m[4/7]\e[0m" echo "" sleep 1 ## Criando a stack cat > $nome_da_stack_wordpress <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Wordpress" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[5/7]\e[0m" echo "" sleep 1 ## Usa o serviço wait_wordpress para verificar se o serviço esta online wait_wordpress ## Mensagem de Passo echo -e "\e[97m• EDITANDO PHP.INI \e[33m[6/7]\e[0m" echo "" sleep 1 ## Editando o PHP.INI cp /var/lib/docker/volumes/$nome_da_date_wordpress_php/_data/php.ini-production /var/lib/docker/volumes/$nome_da_date_wordpress_php/_data/php.ini # caminho_php_ini="/var/lib/docker/volumes/$nome_da_date_wordpress_php/_data/php.ini" caminho_arquivos_site="/var/lib/docker/volumes/$nome_da_date_wordpress_php/_data/php.ini" # sed -i "s/^upload_max_filesize =.*/upload_max_filesize = 1024M/" "$caminho_php_ini" sed -i "s/^max_execution_time =.*/max_execution_time = 450/" "$caminho_php_ini" sed -i "s/^memory_limit =.*/memory_limit = 1024M/" "$caminho_php_ini" cd docker service update --force ${nome_do_servico_wordpress}_${nome_do_servico_wordpress} docker stack deploy --prune --resolve-image always -c $nome_da_stack_wordpress $nome_da_stack_wordpress_subir ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[7/7]\e[0m" echo "" sleep 1 ## Usa o serviço wait_wordpress para verificar se o serviço esta online wait_wordpress cd dados_vps cat > $nome_do_servico_wordpress <
                              
                              baserow.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Baserow" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_baserow para verificar se o serviço esta online wait_baserow cd dados_vps cat > dados_baserow <
                              
                              Evite os caracteres especiais: @\!#$ e/ou espaço" echo -en "\e[33mDigite o nome de usuario (ex: oriondesign): \e[0m" && read -r user_mongo echo "" ## Gera a senha aleatória pass_mongo=$(openssl rand -hex 16) ## Limpa o terminal clear ## Mostra o nome da aplicação nome_mongodb ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação do Usuario echo -e "\e[33mUsuario:\e[97m $user_mongo\e[0m" echo "" ## Informação da Senha gerada echo -e "\e[33mSenha gerada:\e[97m $pass_mongo\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_mongodb ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO MONGO DB \e[33m[1/3]\e[0m" echo "" sleep 1 ## NADA NADA NADA ## Mensagem de Passo echo -e "\e[97m• INSTALANDO MONGO DB \e[33m[2/3]\e[0m" echo "" sleep 1 ## Criando a stack cat > mongodb.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do MongoDB" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_pgadmin_4 para verificar se o serviço esta online wait_mongodb cd dados_vps ip_vps=$(curl -s ifconfig.me) cat > dados_mongodb <
                              
                              Evite os caracteres especiais: @\!#$ e/ou espaço" echo -en "\e[33mDigite o nome de usuario (ex: OrionDesign): \e[0m" && read -r user_rabbitmq echo "" ## Gera a senha aleatória pass_rabbitmq=$(openssl rand -hex 16) ## Limpa o terminal clear ## Mostra o nome da aplicação nome_rabbitmq ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação do Dominio do RabbitMQ echo -e "\e[33mDominio do RabbitMQ:\e[97m $url_rabbitmq\e[0m" echo "" ## Informação do Usuario do RabbitMQ echo -e "\e[33mUsario:\e[97m $user_rabbitmq\e[0m" echo "" ## Informação da Senha do RabbitMQ echo -e "\e[33mSenha:\e[97m $pass_rabbitmq\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_rabbitmq ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO RABBITMQ \e[33m[1/3]\e[0m" echo "" sleep 1 ## Mensagem de Passo echo -e "\e[97m• INSTALANDO RABBITMQ \e[33m[2/3]\e[0m" echo "" sleep 1 #Key aleatória cookie key_cookie=$(openssl rand -hex 16) ## Criando a stack cat > rabbitmq.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do RabbitMQ" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_pgadmin_4 para verificar se o serviço esta online wait_rabbitmq cd dados_vps ip_vps=$(curl -s ifconfig.me) cat > dados_rabbitmq <
                              
                              uptimekuma.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Uptime Kuma" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_pgadmin_4 para verificar se o serviço esta online wait_uptimekuma cd dados_vps ip_vps=$(curl -s ifconfig.me) cat > dados_uptimekuma <
                              
                              Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP do Email (ex: @Senha123_): \e[0m" && read -r senha_email_calcom echo "" ## Pergunta o Host SMTP do email echo -e "\e[97mPasso$amarelo 4/5\e[0m" echo -en "\e[33mDigite o Host SMTP do Email (ex: smtp.hostinger.com): \e[0m" && read -r smtp_email_calcom echo "" ## Pergunta a porta SMTP do email echo -e "\e[97mPasso$amarelo 5/5\e[0m" echo -en "\e[33mDigite a porta SMTP do Email (ex: 465): \e[0m" && read -r porta_smtp_calcom echo "" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_chatwoot ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL echo -e "\e[33mDominio do Cal.com\e[97m $url_calcom\e[0m" echo "" ## Informação sobre Email SMTP echo -e "\e[33mEmail SMTP:\e[97m $email_calcom\e[0m" echo "" ## Informação sobre Senha SMTP echo -e "\e[33mSenha SMTP:\e[97m $senha_email_calcom\e[0m" echo "" ## Informação sobre Host SMTP echo -e "\e[33mHost SMTP:\e[97m $smtp_email_calcom\e[0m" echo "" ## Informação sobre Porta SMTP echo -e "\e[33mPorta SMTP:\e[97m $porta_smtp_calcom\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_calcom ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO CALCOM \e[33m[1/4]\e[0m" echo "" sleep 1 ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/4]\e[0m" echo "" sleep 1 verificar_container_postgres if [ $? -eq 0 ]; then sleep 1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_calcom #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_calcom #> /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO CAL.COM \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando key aleatória secret=$(openssl rand -hex 16) ## Criando a stack cat > calcom.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do CalCom" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_calcom para verificar se o serviço esta online wait_calcom cd dados_vps cat > dados_calcom <
                              
                              Sem caracteres especiais: \!#$ e/ou espaços" echo -en "\e[33mDigite um usuario (ex: OrionDesign): \e[0m" && read -r user_mautic echo "" ## Pergunta o email da ferramenta echo -e "\e[97mPasso$amarelo 3/4\e[0m" echo -en "\e[33mDigite o Email de admin: (ex: contato@oriondesign.art.br): \e[0m" && read -r email_mautic echo "" ## Pergunta o senha da ferramenta echo -e "\e[97mPasso$amarelo 4/4\e[0m" echo -e "$amarelo--> Sem caracteres especiais: \!#$" echo -en "\e[33mDigite uma Senha (ex: @Senha123_): \e[0m" && read -r senha_email_mautic echo "" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_mautic ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL echo -e "\e[33mDominio do Mautic:\e[97m $url_mautic\e[0m" echo "" ## Informação sobre Usuario Admin echo -e "\e[33mUsuario admin:\e[97m $user_mautic\e[0m" echo "" ## Informação sobre Email Admin echo -e "\e[33mEmail do admin:\e[97m $email_mautic\e[0m" echo "" ## Informação sobre Senha Admin echo -e "\e[33mSenha do Admin:\e[97m $senha_email_mautic\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_mautic ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO MAUTIC \e[33m[1/4]\e[0m" echo "" sleep 1 ## Mensagem de Passo echo -e "\e[97m• ERIFICANDO/INSTALANDO MYSQL \e[33m[2/4]\e[0m" echo "" sleep 1 dados verificar_container_mysql if [ $? -eq 0 ]; then pegar_senha_mysql > /dev/null 2>&1 criar_banco_mysql_mautic else ferramenta_mysql > /dev/null 2>&1 pegar_senha_mysql > /dev/null 2>&1 criar_banco_mysql_mautic fi ## Espera 30 segundos wait_30_sec ## Mensagem de Passo echo -e "\e[97m• INSTALANDO MAUTIC \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando a stack cat > mautic.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do Mautic" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_calcom para verificar se o serviço esta online wait_mautic cd dados_vps cat > dados_mautic <
                              
                              appsmith.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Appsmith" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_nocobase para verificar se o serviço esta online wait_appsmith cd dados_vps cat > dados_appsmith <
                              
                              qdrant.yaml <<-EOF version: "3.7" services: EOF for ((node=0; node
                              
                              > qdrant.yaml <<-EOF $SERVICE_NAME: image: qdrant/qdrant:latest volumes: - qdrant_data:/qdrant command: $COMMAND restart: always environment: - QDRANT__SERVICE__GRPC_PORT=6334 - QDRANT__CLUSTER__ENABLED=true - QDRANT__CLUSTER__P2P__PORT=6335 - QDRANT__CLUSTER__CONSENSUS__MAX_MESSAGE_QUEUE_SIZE=5000 - QDRANT__LOG_LEVEL=debug,raft=info ports: - "$HTTP_PORT:6333" - "$GRPC_PORT:6334" deploy: resources: limits: cpus: "0.3" EOF cat > qdrant.yaml <<-EOF volumes: qdrant_data: external: true name: qdrant_data EOF done if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel criar a stack do Qdrant" fi docker stack deploy --prune --resolve-image always -c qdrant.yaml qdrant > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Qdrant" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_nocobase para verificar se o serviço esta online wait_qdrant cd dados_vps cat > dados_qdrant <
                              
                              Evite os caracteres especiais: @\!#$ e/ou espaço" echo -en "\e[33mDigite o User do MOTOR (ex: oriondesign): \e[0m" && read -r email_admin_woofed echo "" ## Pergunta o nome do Senha do Motor echo -e "\e[97mPasso$amarelo 4/4\e[0m" echo -e "$amarelo--> Evite os caracteres especiais: \!#$ e/ou espaço" echo -en "\e[33mDigite a Senha do MOTOR (ex: @Senha123_): \e[0m" && read -r senha_email_woofed echo "" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_rabbitmq ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre o dominio echo -e "\e[33mDominio:\e[97m $url_woofed\e[0m" echo "" ## Informação sobre a versão echo -e "\e[33mVersão:\e[97m $v_woofed\e[0m" echo "" ## Informação sobre o usuario echo -e "\e[33mUser MOTOR:\e[97m $email_admin_woofed\e[0m" echo "" ## Informação sobre a senha echo -e "\e[33mSenha MOTOR:\e[97m $senha_email_woofed\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_woofedcrm ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO WOOFED CRM \e[33m[1/7]\e[0m" echo "" sleep 1 ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/7]\e[0m" echo "" sleep 1 dados verificar_container_postgres if [ $? -eq 0 ]; then echo "" pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_woofedcrm #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_woofedcrm #> /dev/null 2>&1 fi sleep 5 ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO REDIS \e[33m[3/7]\e[0m" echo "" verificar_container_redis if [ $? -eq 0 ]; then echo "" else ferramenta_redis > /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO WOOFED CRM \e[33m[4/7]\e[0m" echo "" sleep 1 ## Criando uma Encryption Key Aleatória encryption_key_woofed=$(openssl rand -hex 16) ## Criando a stack cat > woofedcrm.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do WoofedCRM" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[5/7]\e[0m" wait_30_sec echo "" sleep 1 ## Usa o serviço wait_woofedrm para verificar se o serviço esta online wait_woofedcrm ## Mensagem de Passo echo -e "\e[97m• CONFIGURANDO E MIGRANDO BANCO DE DADOS \e[33m[6/7]\e[0m" echo "" sleep 1 #MIGRANDO BANCO DE DADOS DO WOOFED CRM container_name=" woofedcrm_woofedcrm" max_wait_time=1200 wait_interval=60 elapsed_time=0 while [ $elapsed_time -lt $max_wait_time ]; do CONTAINER_ID=$(docker ps -q --filter "name=$container_name") if [ -n "$CONTAINER_ID" ]; then break fi sleep $wait_interval elapsed_time=$((elapsed_time + wait_interval)) done if [ -z "$CONTAINER_ID" ]; then echo "O contêiner não foi encontrado após $max_wait_time segundos." exit 1 fi docker exec -it "$CONTAINER_ID" bundle exec rails db:create docker exec -it "$CONTAINER_ID" bundle exec rails db:migrate #docker exec -it "$CONTAINER_ID" bundle exec rails db:seed ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[7/7]\e[0m" echo "" sleep 1 ## Usa o serviço wait_woofedrm para verificar se o serviço esta online wait_woofedcrm cd dados_vps cat > dados_woofedcrm <
                              
                              Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP do email (ex: @Senha123_): \e[0m" && read -r senha_formbricks echo "" ## Pergunta o Host SMTP echo -e "\e[97mPasso$amarelo 4/5\e[0m" echo -en "\e[33mDigite o Host SMTP do email (ex: smtp.hostinger.com): \e[0m" && read -r host_formbricks echo "" ## Pergunta a Porta SMTP echo -e "\e[97mPasso$amarelo 5/5\e[0m" echo -en "\e[33mDigite a Porta SMTP do email (ex: 465): \e[0m" && read -r porta_formbricks echo "" if [ "$porta_formbricks" -eq 465 ] || [ "$porta_formbricks" -eq 25 ]; then ssl_formbricks=1 else ssl_formbricks=0 fi ## Limpa o terminal clear ## Mostra o nome da aplicação nome_formbricks ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL echo -e "\e[33mDominio:\e[97m $url_formbricks\e[0m" echo "" ## Informação sobre Email echo -e "\e[33mEmail SMTP:\e[97m $email_formbricks\e[0m" echo "" ## Informação sobre Senha echo -e "\e[33mSenha SMTP:\e[97m $senha_formbricks\e[0m" echo "" ## Informação sobre Host echo -e "\e[33mHost SMTP:\e[97m $host_formbricks\e[0m" echo "" ## Informação sobre Porta echo -e "\e[33mPorta SMTP:\e[97m $porta_formbricks\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_formbricks ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO FORMBRICKS \e[33m[1/4]\e[0m" echo "" sleep 1 ## Nada nada nada.. só para aparecer a mensagem de passo.. ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/4]\e[0m" echo "" sleep 1 verificar_container_postgres if [ $? -eq 0 ]; then sleep 1 criar_banco_postgres_formbricks #> /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_formbricks #> /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO FORMBRICKS \e[33m[3/4]\e[0m" echo "" sleep 1 ## Gera keys aleatórias encryption_key_form=$(openssl rand -hex 16) next_key_form=$(openssl rand -hex 16) cron_key_form=$(openssl rand -hex 16) ## Criando a stack cat > formbricks.yaml <<-EOF version: "3.7" services: formbricks: image: formbricks/formbricks:latest networks: - $nome_rede_interna volumes: - formbricks_data:/home/nextjs/apps/web/uploads/ environment: ## Url da aplicação ## - WEBAPP_URL=https://$url_formbricks - NEXTAUTH_URL=https://$url_formbricks ## Banco de dados Postgres ## - DATABASE_URL=postgresql://postgres:$senha_postgres@postgres:5432/formbricks ## Licença Enterprise ou Self-hosting ## ## Solicitar licenta Self-hosting --> https://oriondesign.art.br/formbricks_licence/ <-- ## - ENTERPRISE_LICENSE_KEY= ## Keys aleatórias 32 caracteres ## - ENCRYPTION_KEY=$encryption_key_form - NEXTAUTH_SECRET=$next_key_form - CRON_SECRET=$cron_key_form ## Dados do SMTP ## - MAIL_FROM=$email_formbricks - SMTP_HOST=$host_formbricks - SMTP_PORT=$porta_formbricks - SMTP_SECURE_ENABLED=$ssl_formbricks #(0= false | 1= true) - SMTP_USER=$email_formbricks - SMTP_PASSWORD=$senha_formbricks ## Ativar/Desativar registros e convites (0= false | 1= true) ## - SIGNUP_DISABLED=0 - INVITE_DISABLED=0 - EMAIL_VERIFICATION_DISABLED=0 - PASSWORD_RESET_DISABLED=0 ## Dados do Formbricks (para pesquisa) ## - NEXT_PUBLIC_FORMBRICKS_API_HOST= - NEXT_PUBLIC_FORMBRICKS_ENVIRONMENT_ID= - NEXT_PUBLIC_FORMBRICKS_ONBOARDING_SURVEY_ID= ## Login Google Cloud ## - GOOGLE_AUTH_ENABLED=0 - GOOGLE_CLIENT_ID= - GOOGLE_CLIENT_SECRET= ## Google Sheets ## - GOOGLE_SHEETS_CLIENT_ID= - GOOGLE_SHEETS_CLIENT_SECRET= - GOOGLE_SHEETS_REDIRECT_URL= ## Login Github ## - GITHUB_AUTH_ENABLED=0 - GITHUB_ID= - GITHUB_SECRET= ## Login Github ## - NOTION_OAUTH_CLIENT_ID= - NOTION_OAUTH_CLIENT_SECRET= ## Login Airtable ## - AIRTABLE_CLIENT_ID= ## Termos e politica de privacidade ## #- PRIVACY_URL= #- TERMS_URL= #- IMPRINT_URL= deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager resources: limits: cpus: "1" memory: 1024M labels: - traefik.enable=true - traefik.http.routers.formbricks.rule=Host(\`$url_formbricks\`) - traefik.http.services.formbricks.loadbalancer.server.port=3000 - traefik.http.routers.formbricks.service=formbricks - traefik.http.routers.formbricks.tls.certresolver=letsencryptresolver - traefik.http.routers.formbricks.entrypoints=websecure - traefik.http.routers.formbricks.tls=true networks: $nome_rede_interna: name: $nome_rede_interna external: true volumes: formbricks_data: external: true EOF if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel criar a stack do Formbricks" fi docker stack deploy --prune --resolve-image always -c formbricks.yaml formbricks > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do Formbricks" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_formbricks para verificar se o serviço esta online wait_formbricks cd dados_vps cat > dados_formbricks <
                              
                              /dev/null 2>&1 criar_banco_postgres_nocodb #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_nocodb #> /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO NOCODB \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando a stack cat > nocodb.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do NocoDB" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_nocodb para verificar se o serviço esta online wait_nocodb cd dados_vps cat > dados_nocodb <
                              
                              /dev/null 2>&1 criar_banco_postgres_langfuse #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_langfuse #> /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO LANGFUSE \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando key Aleatória 64caracteres key_secret=$(openssl rand -hex 32) ## Criando key Aleatória 32caracteres key_salt=$(openssl rand -hex 16) ## Criando a stack cat > langfuse.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do langfuse" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_langfuse para verificar se o serviço esta online wait_langfuse cd dados_vps cat > dados_langfuse <
                              
                              /dev/null 2>&1 criar_banco_postgres_metabase #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_metabase #> /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO METABASE \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando key Aleatória 64caracteres key_secret=$(openssl rand -hex 32) ## Criando key Aleatória 32caracteres key_salt=$(openssl rand -hex 16) ## Criando a stack cat > metabase.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do metabase" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_metabase para verificar se o serviço esta online wait_metabase cd dados_vps cat > dados_metabase <
                              
                              odoo.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Odoo" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_odoo para verificar se o serviço esta online wait_odoo cd dados_vps cat > dados_odoo <
                              
                              Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP do Email (ex: @Senha123_): \e[0m" && read -r senha_email_chatwoot echo "" ## Pergunta o Host SMTP do email echo -e "\e[97mPasso$amarelo 4/5\e[0m" echo -en "\e[33mDigite o Host SMTP do Email (ex: smtp.hostinger.com): \e[0m" && read -r smtp_email_chatwoot echo "" ## Pergunta a porta SMTP do email echo -e "\e[97mPasso$amarelo 5/5\e[0m" echo -en "\e[33mDigite a porta SMTP do Email (ex: 465): \e[0m" && read -r porta_smtp_chatwoot ## Verifica se a porta é 465, se sim deixa o ssl true, se não, deixa false if [ "$porta_smtp_chatwoot" -eq 465 ]; then sobre_ssl=true else sobre_ssl=false fi ## Limpa o terminal clear ## Mostra o nome da aplicação nome_chatwoot ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL echo -e "\e[33mDominio do Chatwoot:\e[97m $url_chatwoot\e[0m" echo "" ## Informação sobre Nome da Empresa echo -e "\e[33mNome da Empresa:\e[97m $nome_empresa_chatwoot\e[0m" echo "" ## Informação sobre Email de SMTP echo -e "\e[33mEmail do SMTP:\e[97m $email_admin_chatwoot\e[0m" echo "" ## Informação sobre Senha de SMTP echo -e "\e[33mSenha do SMTP:\e[97m $senha_email_chatwoot\e[0m" echo "" ## Informação sobre Host SMTP echo -e "\e[33mHost SMTP:\e[97m $smtp_email_chatwoot\e[0m" echo "" ## Informação sobre Porta SMTP echo -e "\e[33mPorta SMTP:\e[97m $porta_smtp_chatwoot\e[0m" echo "" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_chatwoot ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO CHATWOOT CLAIRTON \e[33m[1/6]\e[0m" echo "" sleep 1 ## Ativa a função dados para pegar os dados da vps dados ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES E REDIS \e[33m[2/6]\e[0m" echo "" sleep 1 ## Aqui vamos fazer uma verificação se já existe Postgres e redis instalado ## Se tiver ele vai criar um banco de dados no postgres ou perguntar se deseja apagar o que já existe e criar outro ## Verifica container postgres e cria banco no postgres verificar_container_postgres if [ $? -eq 0 ]; then pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_chatwoot_uno else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_chatwoot_uno fi if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" fi ## Verifica container redis verificar_container_redis if [ $? -eq 0 ]; then echo "" else ferramenta_redis > /dev/null 2>&1 fi if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO CHATWOOT CLAIRTON \e[33m[3/6]\e[0m" echo "" sleep 1 ## Neste passo vamos estar criando a Stack yaml do Chatwoot na pasta /root/ ## Isso possibilitará que o usuario consiga edita-lo posteriormente ## Depois vamos instalar o Chatwoot e verificar se esta tudo certo. ## Criando key aleatória encryption_key=$(openssl rand -hex 16) ## Criando a stack cat > chatwoot_uno.yaml <
                              
                              <$email_admin_chatwoot> ## Email SMTP - SMTP_DOMAIN=$dominio_smtp_chatwoot ## Dominio do email - SMTP_ADDRESS=$smtp_email_chatwoot ## Host SMTP - SMTP_PORT=$porta_smtp_chatwoot ## Porta SMTP - SMTP_SSL=$sobre_ssl ## Se a porta for 465 = true | Se a porta for 587 = false - SMTP_USERNAME=$email_admin_chatwoot ## Email SMTP - SMTP_PASSWORD=$senha_email_chatwoot ## Senha do SMTP - SMTP_AUTHENTICATION=login - SMTP_ENABLE_STARTTLS_AUTO=true - SMTP_OPENSSL_VERIFY_MODE=peer - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot ## Email SMTP deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager resources: limits: cpus: "1" memory: 1024M labels: - traefik.enable=true - traefik.http.routers.chatwoot_uno_app.rule=Host(\`$url_chatwoot\`) - traefik.http.routers.chatwoot_uno_app.entrypoints=websecure - traefik.http.routers.chatwoot_uno_app.tls.certresolver=letsencryptresolver - traefik.http.routers.chatwoot_uno_app.priority=1 - traefik.http.routers.chatwoot_uno_app.service=chatwoot_uno_app - traefik.http.services.chatwoot_uno_app.loadbalancer.server.port=3000 - traefik.http.services.chatwoot_uno_app.loadbalancer.passhostheader=true - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https - traefik.http.routers.chatwoot_uno_app.middlewares=sslheader@docker chatwoot_uno_sidekiq: image: clairton/chatwoot:v3.6.1-uno command: bundle exec sidekiq -C config/sidekiq.yml volumes: - chatwoot_uno_data:/app/storage ## Diretório dos arquivos de conversa - chatwoot_uno_public_orion:/app ## Diretório de todos os arquivos do chatwoot networks: - $nome_rede_interna ## Nome da rede interna environment: - CHATWOOT_HUB_URL=https://oriondesign.art.br/setup# - INSTALLATION_NAME=$nome_empresa_chatwoot ## Nome da empresa - NODE_ENV=production - RAILS_ENV=production - INSTALLATION_ENV=docker - SECRET_KEY_BASE=$encryption_key ## Key aleatória gerada aleatóriamente - FRONTEND_URL=https://$url_chatwoot ## Url do Chatwoot - DEFAULT_LOCALE=pt_BR - FORCE_SSL=true - ENABLE_ACCOUNT_SIGNUP=false ## false = Desativar novas inscrições no inicio | true = Ativar novas inscrições no inicio - REDIS_URL=redis://redis:6379 - POSTGRES_HOST=postgres - POSTGRES_USERNAME=postgres - POSTGRES_PASSWORD=$senha_postgres ## Senha do postgres - POSTGRES_DATABASE=chatwoot_uno - ACTIVE_STORAGE_SERVICE=local - RAILS_LOG_TO_STDOUT=true - USE_INBOX_AVATAR_FOR_BOT=true - MAILER_SENDER_EMAIL=$email_admin_chatwoot <$email_admin_chatwoot> ## Email SMTP - SMTP_DOMAIN=$dominio_smtp_chatwoot ## Dominio do email - SMTP_ADDRESS=$smtp_email_chatwoot ## Host SMTP - SMTP_PORT=$porta_smtp_chatwoot ## Porta SMTP - SMTP_SSL=$sobre_ssl ## Se a porta for 465 = true | Se a porta for 587 = false - SMTP_USERNAME=$email_admin_chatwoot ## Email SMTP - SMTP_PASSWORD=$senha_email_chatwoot ## Senha do SMTP - SMTP_AUTHENTICATION=login - SMTP_ENABLE_STARTTLS_AUTO=true - SMTP_OPENSSL_VERIFY_MODE=peer - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot ## Email SMTP deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager resources: limits: cpus: "1" memory: 1024M volumes: chatwoot_uno_data: external: true name: chatwoot_uno_data chatwoot_uno_public_orion: external: true name: chatwoot_uno_public_orion networks: $nome_rede_interna: ## Nome da rede interna external: true name: $nome_rede_interna ## Nome da rede interna EOL if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel criar a stack do Chatwoot" fi docker stack deploy --prune --resolve-image always -c chatwoot_uno.yaml chatwoot_uno > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do Chatwoot" fi ## Mensagem de Passo echo -e "\e[97m• ESPERANDO SERVIÇO DO CHATWOOT ESTAR PRONTO \e[33m[4/6]\e[0m" echo "" sleep 1 ## Usa o serviço wait_chatwoot para verificar se o serviço esta online wait_chatwoot_uno ## Mensagem de Passo echo -e "\e[97m• REINICIANDO CHATWOOT \e[33m[5/6]\e[0m" echo "" sleep 1 ## Aqui vamos estar migrando o banco de dados usando o comando "bundle exec rails db:chatwoot_prepare" ## Basicamente voce poderia entrar no banco de dados do chatwoot e executar o comando por lá tambem container_name="chatwoot_uno_chatwoot_uno_app" max_wait_time=1200 wait_interval=60 elapsed_time=0 while [ $elapsed_time -lt $max_wait_time ]; do CONTAINER_ID=$(docker ps -q --filter "name=$container_name") if [ -n "$CONTAINER_ID" ]; then break fi sleep $wait_interval elapsed_time=$((elapsed_time + wait_interval)) done if [ -z "$CONTAINER_ID" ]; then echo "O contêiner não foi encontrado após $max_wait_time segundos." exit 1 fi docker exec -it "$CONTAINER_ID" bundle exec rails db:chatwoot_prepare if [ $? -eq 0 ]; then echo "1/1 - [ OK ]" else echo "1/1 - [ OFF ]" echo "Não foi possivel migrar o banco de dados" fi ## Mensagem de Passo echo -e "\e[97m• ATIVANDO FUNÇÕES DO SUPER ADMIN \e[33m[6/6]\e[0m" echo "" sleep 1 ## Aqui vamos alterar um dado no postgres para liberar algumas funções ocultas no painel de super admin wait_for_postgres docker exec -i $CONTAINER_ID psql -U postgres <
                              
                              dados_chatwoot_uno <
                              
                              Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP do Email (ex: @Senha123_): \e[0m" && read -r senha_email_chatwoot echo "" ## Pergunta o Host SMTP do email echo -e "\e[97mPasso$amarelo 4/5\e[0m" echo -en "\e[33mDigite o Host SMTP do Email (ex: smtp.hostinger.com): \e[0m" && read -r smtp_email_chatwoot echo "" ## Pergunta a porta SMTP do email echo -e "\e[97mPasso$amarelo 5/5\e[0m" echo -en "\e[33mDigite a porta SMTP do Email (ex: 465): \e[0m" && read -r porta_smtp_chatwoot ## Verifica se a porta é 465, se sim deixa o ssl true, se não, deixa false if [ "$porta_smtp_chatwoot" -eq 465 ]; then sobre_ssl=true else sobre_ssl=false fi ## Limpa o terminal clear ## Mostra o nome da aplicação nome_chatwoot ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL echo -e "\e[33mDominio do Chatwoot:\e[97m $url_chatwoot\e[0m" echo "" ## Informação sobre Nome da Empresa echo -e "\e[33mNome da Empresa:\e[97m $nome_empresa_chatwoot\e[0m" echo "" ## Informação sobre Email de SMTP echo -e "\e[33mEmail do SMTP:\e[97m $email_admin_chatwoot\e[0m" echo "" ## Informação sobre Senha de SMTP echo -e "\e[33mSenha do SMTP:\e[97m $senha_email_chatwoot\e[0m" echo "" ## Informação sobre Host SMTP echo -e "\e[33mHost SMTP:\e[97m $smtp_email_chatwoot\e[0m" echo "" ## Informação sobre Porta SMTP echo -e "\e[33mPorta SMTP:\e[97m $porta_smtp_chatwoot\e[0m" echo "" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_chatwoot ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO CHATWOOT NESTOR \e[33m[1/5]\e[0m" echo "" sleep 1 ## Ativa a função dados para pegar os dados da vps dados ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES E REDIS \e[33m[2/5]\e[0m" echo "" sleep 1 ## Aqui vamos fazer uma verificação se já existe Postgres e redis instalado ## Se tiver ele vai criar um banco de dados no postgres ou perguntar se deseja apagar o que já existe e criar outro ## Verifica container postgres e cria banco no postgres verificar_container_postgres if [ $? -eq 0 ]; then pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_chatwoot_nestor else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_chatwoot_nestor fi if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" fi ## Verifica container redis verificar_container_redis if [ $? -eq 0 ]; then echo "" else ferramenta_redis > /dev/null 2>&1 fi if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO CHATWOOT NESTOR \e[33m[3/5]\e[0m" echo "" sleep 1 ## Neste passo vamos estar criando a Stack yaml do Chatwoot na pasta /root/ ## Isso possibilitará que o usuario consiga edita-lo posteriormente ## Depois vamos instalar o Chatwoot e verificar se esta tudo certo. ## Criando key aleatória encryption_key=$(openssl rand -hex 16) ## Criando a stack cat > chatwoot_nestor.yaml <
                              
                              <$email_admin_chatwoot> ## Email SMTP - SMTP_DOMAIN=$dominio_smtp_chatwoot ## Dominio do email - SMTP_ADDRESS=$smtp_email_chatwoot ## Host SMTP - SMTP_PORT=$porta_smtp_chatwoot ## Porta SMTP - SMTP_SSL=$sobre_ssl ## Se a porta for 465 = true | Se a porta for 587 = false - SMTP_USERNAME=$email_admin_chatwoot ## Email SMTP - SMTP_PASSWORD=$senha_email_chatwoot ## Senha do SMTP - SMTP_AUTHENTICATION=login - SMTP_ENABLE_STARTTLS_AUTO=true - SMTP_OPENSSL_VERIFY_MODE=peer - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot ## Email SMTP deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager resources: limits: cpus: "1" memory: 1024M labels: - traefik.enable=true - traefik.http.routers.chatwoot_nestor_app.rule=Host(\`$url_chatwoot\`) - traefik.http.routers.chatwoot_nestor_app.entrypoints=websecure - traefik.http.routers.chatwoot_nestor_app.tls.certresolver=letsencryptresolver - traefik.http.routers.chatwoot_nestor_app.priority=1 - traefik.http.routers.chatwoot_nestor_app.service=chatwoot_nestor_app - traefik.http.services.chatwoot_nestor_app.loadbalancer.server.port=3000 - traefik.http.services.chatwoot_nestor_app.loadbalancer.passhostheader=true - traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto=https - traefik.http.routers.chatwoot_nestor_app.middlewares=sslheader@docker chatwoot_nestor_sidekiq: image: francisbreit/chatwoot-n:v3.6.7-v2 ## Versão do Chatwoot NESTOR command: bundle exec sidekiq -C config/sidekiq.yml volumes: - chatwoot_nestor_data:/app/storage ## Diretório dos arquivos de conversa - chatwoot_nestor_public_orion:/app ## Diretório de todos os arquivos do chatwoot networks: - $nome_rede_interna ## Nome da rede interna environment: - CHATWOOT_HUB_URL=https://oriondesign.art.br/setup# - INSTALLATION_NAME=$nome_empresa_chatwoot ## Nome da empresa - NODE_ENV=production - RAILS_ENV=production - INSTALLATION_ENV=docker - SECRET_KEY_BASE=$encryption_key ## Key aleatória gerada aleatóriamente - FRONTEND_URL=https://$url_chatwoot ## Url do Chatwoot - DEFAULT_LOCALE=pt_BR - FORCE_SSL=true - ENABLE_ACCOUNT_SIGNUP=false ## false = Desativar novas inscrições no inicio | true = Ativar novas inscrições no inicio - REDIS_URL=redis://redis:6379 - POSTGRES_HOST=postgres - POSTGRES_USERNAME=postgres - POSTGRES_PASSWORD=$senha_postgres ## Senha do postgres - POSTGRES_DATABASE=chatwoot_nestor - ACTIVE_STORAGE_SERVICE=local - RAILS_LOG_TO_STDOUT=true - USE_INBOX_AVATAR_FOR_BOT=true - MAILER_SENDER_EMAIL=$email_admin_chatwoot <$email_admin_chatwoot> ## Email SMTP - SMTP_DOMAIN=$dominio_smtp_chatwoot ## Dominio do email - SMTP_ADDRESS=$smtp_email_chatwoot ## Host SMTP - SMTP_PORT=$porta_smtp_chatwoot ## Porta SMTP - SMTP_SSL=$sobre_ssl ## Se a porta for 465 = true | Se a porta for 587 = false - SMTP_USERNAME=$email_admin_chatwoot ## Email SMTP - SMTP_PASSWORD=$senha_email_chatwoot ## Senha do SMTP - SMTP_AUTHENTICATION=login - SMTP_ENABLE_STARTTLS_AUTO=true - SMTP_OPENSSL_VERIFY_MODE=peer - MAILER_INBOUND_EMAIL_DOMAIN=$email_admin_chatwoot ## Email SMTP deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager resources: limits: cpus: "1" memory: 1024M volumes: chatwoot_nestor_data: external: true name: chatwoot_nestor_data chatwoot_nestor_public_orion: external: true name: chatwoot_nestor_public_orion networks: $nome_rede_interna: ## Nome da rede interna external: true name: $nome_rede_interna ## Nome da rede interna EOL if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel criar a stack do Chatwoot" fi docker stack deploy --prune --resolve-image always -c chatwoot_nestor.yaml chatwoot_nestor > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do Chatwoot" fi ## Mensagem de Passo echo -e "\e[97m• ESPERANDO SERVIÇO DO CHATWOOT ESTAR PRONTO \e[33m[4/5]\e[0m" echo "" sleep 1 ## Usa o serviço wait_chatwoot_nestor para verificar se o serviço esta online wait_chatwoot_nestor ## Mensagem de Passo echo -e "\e[97m• PREPARANDO BANCO DE DADOS \e[33m[5/5]\e[0m" echo "" sleep 1 ## Aqui vamos estar migrando o banco de dados usando o comando "bundle exec rails db:chatwoot_prepare" ## Basicamente voce poderia entrar no banco de dados do chatwoot e executar o comando por lá tambem container_name="chatwoot_nestor_chatwoot_nestor_app" max_wait_time=1200 wait_interval=60 elapsed_time=0 while [ $elapsed_time -lt $max_wait_time ]; do CONTAINER_ID=$(docker ps -q --filter "name=$container_name") if [ -n "$CONTAINER_ID" ]; then break fi sleep $wait_interval elapsed_time=$((elapsed_time + wait_interval)) done if [ -z "$CONTAINER_ID" ]; then echo "O contêiner não foi encontrado após $max_wait_time segundos." exit 1 fi docker exec -it "$CONTAINER_ID" bundle exec rails db:chatwoot_prepare if [ $? -eq 0 ]; then echo "1/1 - [ OK ]" else echo "1/1 - [ OFF ]" echo "Não foi possivel migrar o banco de dados" fi ## Salvando informações da instalação dentro de /dados_vps/ cd dados_vps cat > dados_chatwoot_nestor <
                              
                              unoapi.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do Uno API" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_unoapi para verificar se o serviço esta online wait_unoapi cd dados_vps cat > dados_unoapi <
                              
                              /dev/null 2>&1 criar_banco_postgres_n8n_quepasa #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_n8n_quepasa #> /dev/null 2>&1 fi ## Verifica se tem redis, se tiver, continua, se não tiver instala verificar_container_redis if [ $? -eq 0 ]; then sleep 1 else ferramenta_redis > /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO N8N \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando key Aleatória encryption_key=$(openssl rand -hex 16) ## Criando a stack cat > n8n_quepasa.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do N8N Quepasa" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_n8n para verificar se o serviço esta online wait_n8n_quepasa cd dados_vps cat > dados_n8n_quepasa <
                              
                              quepasa.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Quepasa" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_quepasa para verificar se o serviço esta online wait_quepasa cd dados_vps cat > dados_quepasa <
                              
                              Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP do Email (ex: @Senha123_): \e[0m" && read -r senha_email_dify echo "" ## Pergunta o Host SMTP do email echo -e "\e[97mPasso$amarelo 6/9\e[0m" echo -en "\e[33mDigite o Host SMTP do Email (ex: smtp.hostinger.com): \e[0m" && read -r smtp_email_dify echo "" ## Pergunta a porta SMTP do email echo -e "\e[97mPasso$amarelo 7/9\e[0m" echo -en "\e[33mDigite a porta SMTP do Email (ex: 465): \e[0m" && read -r porta_smtp_dify echo "" ## Pergunta qual é o Access Key do minio echo -e "\e[97mPasso$amarelo 8/9\e[0m" echo -en "\e[33mAccess Key Minio: \e[0m" && read -r S3_ACCESS_KEY echo "" ## Pergunta qual é a Secret Key do minio echo -e "\e[97mPasso$amarelo 9/9\e[0m" echo -en "\e[33mSecret Key Minio: \e[0m" && read -r S3_SECRET_KEY echo "" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_dify ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL do Builder echo -e "\e[33mDominio do Dify AI:\e[97m $url_dify\e[0m" echo "" ## Informação sobre URL do Viewer echo -e "\e[33mDominio do Qdrant:\e[97m $url_quedrant\e[0m" echo "" ## Informação sobre a versão da ferramenta echo -e "\e[33mApi Key Qdrant:\e[97m $apikey_qdrant\e[0m" echo "" ## Informação sobre Email echo -e "\e[33mEmail do SMTP:\e[97m $email_dify\e[0m" echo "" ## Informação sobre Senha do Email echo -e "\e[33mSenha do Email:\e[97m $senha_email_dify\e[0m" echo "" ## Informação sobre Host SMTP echo -e "\e[33mHost SMTP do Email:\e[97m $smtp_email_dify\e[0m" echo "" ## Informação sobre Porta SMTP echo -e "\e[33mPorta SMTP do Email:\e[97m $porta_smtp_dify\e[0m" echo "" ## Informação sobre Access Key echo -e "\e[33mAccess Key Minio:\e[97m $S3_ACCESS_KEY\e[0m" echo "" ## Informação sobre Secret Key echo -e "\e[33mSecret Key Minio:\e[97m $S3_SECRET_KEY\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_dify ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO DIFY \e[33m[1/4]\e[0m" echo "" sleep 1 cd if [ ! -d "nginx" ]; then mkdir nginx fi cd nginx wget https://raw.githubusercontent.com/langgenius/dify/main/docker/nginx/nginx.conf > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "1/3 - [ OK ]" else echo "1/3 - [ OFF ]" fi wget https://raw.githubusercontent.com/langgenius/dify/main/docker/nginx/proxy.conf > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/3 - [ OK ]" else echo "2/3 - [ OFF ]" fi if [ ! -d "conf.d" ]; then mkdir conf.d fi cd conf.d wget https://raw.githubusercontent.com/langgenius/dify/main/docker/nginx/conf.d/default.conf > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "3/3 - [ OK ]" else echo "3/3 - [ OFF ]" fi cd cd ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES E REDIS \e[33m[2/4]\e[0m" echo "" sleep 1 ## Aqui vamos fazer uma verificação se já existe Postgres e redis instalado ## Se tiver ele vai criar um banco de dados no postgres ou perguntar se deseja apagar o que já existe e criar outro ## Verifica container postgres e cria banco no postgres verificar_container_postgres if [ $? -eq 0 ]; then pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_dify #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_dify #> /dev/null 2>&1 fi verificar_container_redis if [ $? -eq 0 ]; then sleep 1 else ferramenta_redis > /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• PEGANDO DADOS MINIO \e[33m[3/4]\e[0m" echo "" sleep 1 pegar_senha_minio if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel pegar a senha do minio" fi pegar_link_s3 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel pegar o link do S3" fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO DIFY \e[33m[4/4]\e[0m" echo "" sleep 1 ## Criando key Aleatória secret_key=$(openssl rand -hex 16) ## Criando a stack cat > dify.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do Dify Ai" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_dify para verificar se o serviço esta online wait_dify cd dados_vps cat > dados_dify <
                              
                              ollama.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Ollama" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_nocodb para verificar se o serviço esta online wait_ollama cd dados_vps cat > dados_ollama <
                              
                              1 { if ($1 == "portainer" || $1 == "traefik") {print "[ \033[0;31m" NR-1" \033[0m] - \033[0;31m" toupper(substr($0, 1, 1)) substr($0, 2) " (CUIDADO) \033[0m" } else {print "[ " NR-1" ] - " toupper(substr($0, 1, 1)) substr($0, 2)} }' echo "" # Solicitar ao usuário que escolha uma stack para remover ou sair read -p "Digite o número da stack que você deseja remover (ou digite '0' para voltar): " user_input # Verificar se o usuário deseja sair if [ "$user_input" == "0" ]; then echo "Saindo do script." break fi # Obter o nome da stack com base no número fornecido stack_name=$(docker stack ls --format "{{.Name}}" | sed -n "${user_input}p") # Verificar se a stack existe if docker stack ps "$stack_name" &> /dev/null; then # Remover a stack docker stack rm "$stack_name" echo "Removendo a stack $stack_name..." else echo "A stack $stack_name não foi encontrada." fi done } ## █████╗ ███████╗███████╗██╗███╗ ██╗███████╗ ## ██╔══██╗██╔════╝██╔════╝██║████╗ ██║██╔════╝ ## ███████║█████╗ █████╗ ██║██╔██╗ ██║█████╗ ## ██╔══██║██╔══╝ ██╔══╝ ██║██║╚██╗██║██╔══╝ ## ██║ ██║██║ ██║ ██║██║ ╚████║███████╗ ## ╚═╝ ╚═╝╚═╝ ╚═╝ ╚═╝╚═╝ ╚═══╝╚══════╝ ferramenta_affine() { ## Limpa o terminal clear ## Ativa a função dados para pegar os dados da vps dados ## Mostra o nome da aplicação nome_affine ## Mostra mensagem para preencher informações preencha_as_info ## Inicia um Loop até os dados estarem certos while true; do ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 1/7\e[0m" echo -en "\e[33mDigite o dominio para o Affine (ex: affine.oriondesign.art.br): \e[0m" && read -r url_affine echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 2/7\e[0m" echo -en "\e[33mDigite o Email de Admin (ex: contato@oriondesign.art.br): \e[0m" && read -r email_affine echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 3/7\e[0m" echo -e "$amarelo--> Sem caracteres especiais: \!#$" echo -en "\e[33mDigite a Senha de Admin (ex: @Senha123_): \e[0m" && read -r senha_affine echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 4/7\e[0m" echo -en "\e[33mDigite a Email SMTP (ex: contato@oriondesign.art.br): \e[0m" && read -r email_smtp_affine echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 5/7\e[0m" echo -e "$amarelo--> Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP (ex: @Senha123_): \e[0m" && read -r senha_smtp_affine echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 6/7\e[0m" echo -en "\e[33mDigite o Host SMTP (ex: smtp.hostinger.com): \e[0m" && read -r host_smtp_affine echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 7/7\e[0m" echo -en "\e[33mDigite a Porta SMTP (ex: 465): \e[0m" && read -r porta_smtp_affine echo "" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_affine ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL do affine echo -e "\e[33mDominio do Affine:\e[97m $url_affine\e[0m" echo "" ## Informação sobre URL do affine echo -e "\e[33mEmail de Admin:\e[97m $email_affine\e[0m" echo "" ## Informação sobre URL do affine echo -e "\e[33mSenha de Admin:\e[97m $senha_affine\e[0m" echo "" ## Informação sobre URL do affine echo -e "\e[33mEmail SMTP:\e[97m $email_smtp_affine\e[0m" echo "" ## Informação sobre URL do affine echo -e "\e[33mSenha SMTP:\e[97m $senha_smtp_affine\e[0m" echo "" ## Informação sobre URL do affine echo -e "\e[33mHost SMTP:\e[97m $host_smtp_affine\e[0m" echo "" ## Informação sobre URL do affine echo -e "\e[33mPorta SMTP:\e[97m $porta_smtp_affine\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_affine ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO AFFINE \e[33m[1/4]\e[0m" echo "" sleep 1 ## Nadaaaaa ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES E REDIS \e[33m[2/4]\e[0m" echo "" sleep 1 ## Cansei já de explicar o que isso faz kkkk verificar_container_postgres if [ $? -eq 0 ]; then sleep 1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_affine #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_affine #> /dev/null 2>&1 fi verificar_container_redis if [ $? -eq 0 ]; then sleep 1 else ferramenta_redis > /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO AFFINE \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando a stack cat > affine.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do Affine" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_affine para verificar se o serviço esta online wait_affine cd dados_vps cat > dados_affine <
                              
                              Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP (ex: @Senha123_): \e[0m" && read -r senha_smtp_docuseal echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 4/5\e[0m" echo -en "\e[33mDigite o Host SMTP (ex: smtp.hostinger.com): \e[0m" && read -r host_smtp_docuseal echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 5/5\e[0m" echo -en "\e[33mDigite a Porta SMTP (ex: 465): \e[0m" && read -r porta_smtp_docuseal echo "" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_docuseal ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL do docuseal echo -e "\e[33mDominio do docuseal:\e[97m $url_docuseal\e[0m" echo "" ## Informação sobre URL do docuseal echo -e "\e[33mEmail SMTP:\e[97m $email_smtp_docuseal\e[0m" echo "" ## Informação sobre URL do docuseal echo -e "\e[33mSenha SMTP:\e[97m $senha_smtp_docuseal\e[0m" echo "" ## Informação sobre URL do docuseal echo -e "\e[33mHost SMTP:\e[97m $host_smtp_docuseal\e[0m" echo "" ## Informação sobre URL do docuseal echo -e "\e[33mPorta SMTP:\e[97m $porta_smtp_docuseal\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_docuseal ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO DOCUSEAL \e[33m[1/4]\e[0m" echo "" sleep 1 ## Nadaaaaa ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES \e[33m[2/4]\e[0m" echo "" sleep 1 ## Cansei já de explicar o que isso faz kkkk verificar_container_postgres if [ $? -eq 0 ]; then sleep 1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_docuseal #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_docuseal #> /dev/null 2>&1 fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO DOCUSEAL \e[33m[3/4]\e[0m" echo "" sleep 1 ## Pegar o dominio do email dominio_smtp_docuseal="${email_smtp_docuseal##*@}" key_docuseal=$(openssl rand -hex 16) key_docuseal2=$(openssl rand -hex 16) ## Criando a stack cat > docuseal.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do docuseal" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_docuseal para verificar se o serviço esta online wait_docuseal cd dados_vps cat > dados_docuseal <
                              
                              Sem caracteres especiais: \!#$" echo -en "\e[33mDigite a Senha SMTP (ex: @Senha123_): \e[0m" && read -r senha_directus echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 4/9\e[0m" echo -en "\e[33mDigite a Email SMTP (ex: contato@oriondesign.art.br): \e[0m" && read -r email_smtp_directus echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 5/9\e[0m" echo -e "$amarelo--> Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP (ex: @Senha123_): \e[0m" && read -r senha_smtp_directus echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 6/9\e[0m" echo -en "\e[33mDigite o Host SMTP (ex: smtp.hostinger.com): \e[0m" && read -r host_smtp_directus echo "" ##Pergunta o Dominio para a ferramenta echo -e "\e[97mPasso$amarelo 7/9\e[0m" echo -en "\e[33mDigite a Porta SMTP (ex: 465): \e[0m" && read -r porta_smtp_directus echo "" ## Pergunta qual é o Access Key do minio echo -e "\e[97mPasso$amarelo 8/9\e[0m" echo -en "\e[33mAccess Key Minio: \e[0m" && read -r S3_ACCESS_KEY echo "" ## Pergunta qual é a Secret Key do minio echo -e "\e[97mPasso$amarelo 9/9\e[0m" echo -en "\e[33mSecret Key Minio: \e[0m" && read -r S3_SECRET_KEY echo "" pegar_senha_minio if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel pegar a senha do minio" fi pegar_link_s3 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel pegar o link do S3" fi ## Limpa o terminal clear ## Mostra o nome da aplicação nome_directus ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL do directus echo -e "\e[33mDominio do Directus:\e[97m $url_directus\e[0m" echo "" ## Informação sobre URL do directus echo -e "\e[33mEmail de Admin:\e[97m $email_directus\e[0m" echo "" ## Informação sobre URL do directus echo -e "\e[33mSenha de Admin:\e[97m $senha_directus\e[0m" echo "" ## Informação sobre URL do directus echo -e "\e[33mEmail SMTP:\e[97m $email_smtp_directus\e[0m" echo "" ## Informação sobre URL do directus echo -e "\e[33mSenha SMTP:\e[97m $senha_smtp_directus\e[0m" echo "" ## Informação sobre URL do directus echo -e "\e[33mHost SMTP:\e[97m $host_smtp_directus\e[0m" echo "" ## Informação sobre URL do directus echo -e "\e[33mPorta SMTP:\e[97m $porta_smtp_directus\e[0m" echo "" ## Informação sobre URL do directus echo -e "\e[33mAccess Key Minio:\e[97m $S3_ACCESS_KEY\e[0m" echo "" ## Informação sobre URL do directus echo -e "\e[33mSecret Key Minio:\e[97m $S3_SECRET_KEY\e[0m" echo "" ## Verifica se a porta é 465, se sim deixa o ssl true, se não, deixa false if [ "$porta_smtp_directus" -eq 465 ]; then ssl_smtp_directus=true else ssl_smtp_directus=false fi ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_directus ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO DIRECTUS \e[33m[1/4]\e[0m" echo "" sleep 1 ## Nadaaaaa ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES E REDIS \e[33m[2/4]\e[0m" echo "" sleep 1 ## Cansei já de explicar o que isso faz kkkk verificar_container_postgres if [ $? -eq 0 ]; then sleep 1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_directus #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_directus #> /dev/null 2>&1 fi if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" fi ## Verifica container redis verificar_container_redis if [ $? -eq 0 ]; then echo "" else ferramenta_redis > /dev/null 2>&1 fi if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" fi ## Mensagem de Passo echo -e "\e[97m• INSTALANDO DIRECTUS \e[33m[3/4]\e[0m" echo "" sleep 1 ## Gerar Secret Key key_directus=$(openssl rand -hex 16) key_directus2=$(openssl rand -hex 16) ## Criando a stack cat > directus.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do directus" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_directus para verificar se o serviço esta online wait_directus cd dados_vps cat > dados_directus <
                              
                              Sem caracteres especiais: \!#$ | Se estiver usando gmail use a senha de app" echo -en "\e[33mDigite a Senha SMTP do email (ex: @Senha123_): \e[0m" && read -r senha_vaultwarden echo "" ## Pergunta o Host SMTP echo -e "\e[97mPasso$amarelo 4/5\e[0m" echo -en "\e[33mDigite o Host SMTP do email (ex: smtp.hostinger.com): \e[0m" && read -r host_vaultwarden echo "" ## Pergunta a Porta SMTP echo -e "\e[97mPasso$amarelo 5/5\e[0m" echo -en "\e[33mDigite a Porta SMTP do email (ex: 465): \e[0m" && read -r porta_vaultwarden echo "" if [ "$porta_vaultwarden" -eq 465 ] || [ "$porta_vaultwarden" -eq 25 ]; then ssl_vaultwarden=force_tls else ssl_vaultwarden=starttls fi ## Limpa o terminal clear ## Mostra o nome da aplicação nome_vaultwarden ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL echo -e "\e[33mDominio:\e[97m $url_vaultwarden\e[0m" echo "" ## Informação sobre Email echo -e "\e[33mEmail SMTP:\e[97m $email_vaultwarden\e[0m" echo "" ## Informação sobre Senha echo -e "\e[33mSenha SMTP:\e[97m $senha_vaultwarden\e[0m" echo "" ## Informação sobre Host echo -e "\e[33mHost SMTP:\e[97m $host_vaultwarden\e[0m" echo "" ## Informação sobre Porta echo -e "\e[33mPorta SMTP:\e[97m $porta_vaultwarden\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_vaultwarden ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO VAULTWARDEN \e[33m[1/3]\e[0m" echo "" sleep 1 ## Nada nada nada.. só para aparecer a mensagem de passo. ## Mensagem de Passo echo -e "\e[97m• INSTALANDO VAULTWARDEN \e[33m[2/3]\e[0m" echo "" sleep 1 ## Criando a stack cat > vaultwarden.yaml <<-EOF version: "3.7" services: ## --------------------------- ORION --------------------------- ## vaultwarden: image: vaultwarden/server:latest networks: - $nome_rede_interna #ports: # - 1973:80 volumes: - vaultwarden-data:/data environment: ## Dominio do Dashboard - DOMAIN:https://$url_vaultwarden ## Permitir novos registros - SIGNUPS_ALLOWED=true ## Dados do SMTP - SMTP_FROM=$email_vaultwarden - SMTP_USERNAME=$email_vaultwarden - SMTP_PASSWORD=$senha_vaultwarden - SMTP_HOST=$host_vaultwarden - SMTP_PORT=$porta_vaultwarden - SMTP_SECURITY=$ssl_vaultwarden ## Configuração do Websocket - WEBSOCKET_ENABLED=true deploy: mode: replicated replicas: 1 placement: constraints: - node.role == manager labels: - "traefik.enable=true" - "traefik.http.routers.vaultwarden.rule=Host(\`$url_vaultwarden\`)" - "traefik.http.routers.vaultwarden.service=vaultwarden" - "traefik.http.routers.vaultwarden.entrypoints=websecure" - "traefik.http.services.vaultwarden.loadbalancer.server.port=80" - "traefik.http.routers.vaultwarden.tls=true" - "traefik.http.routers.vaultwarden.tls.certresolver=letsencryptresolver" - "traefik.http.services.vaultwarden.loadbalancer.passhostheader=true" - "traefik.http.routers.vaultwarden.middlewares=compresstraefik" - "traefik.http.middlewares.compresstraefik.compress=true" - "traefik.docker.network=$nome_rede_interna" ## --------------------------- ORION --------------------------- ## volumes: vaultwarden-data: external: true name: vaultwarden-data networks: $nome_rede_interna: external: true name: $nome_rede_interna EOF if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel criar a stack do vaultwarden" fi docker stack deploy --prune --resolve-image always -c vaultwarden.yaml vaultwarden > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do vaultwarden" fi ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[3/3]\e[0m" echo "" sleep 1 ## Usa o serviço wait_vaultwarden para verificar se o serviço esta online wait_vaultwarden cd dados_vps cat > dados_vaultwarden <
                              
                              /dev/null 2>&1 sudo mv /root/blablabla/SetupOrion/Extras/Grafana/monitor-orion /opt cd rm -r blablabla cd cd ## Criando arquivo datasource cat > datasource.yml <
                              
                              prometheus.yml <
                              
                              monitor.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel subir a stack do Monitor" fi echo "" sleep 10 ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_monitor para verificar se o serviço esta online wait_monitor cd dados_vps cat > dados_monitor <
                              
                              Minimo 8 caracteres. Use Letras MAIUSCULAS e minusculas, numero e um caractere especial @ ou _" echo -en "\e[33mDigite o Senha o Usuario (ex: @Senha123_): \e[0m" && read -r pass_nextcloud echo "" ## Limpa o terminal clear ## Mostra o nome da aplicação nome_nextcloud ## Mostra mensagem para verificar as informações conferindo_as_info ## Informação sobre URL do nextcloud echo -e "\e[33mDominio do NextCloud:\e[97m $url_nextcloud\e[0m" echo "" ## Informação sobre URL do nextcloud echo -e "\e[33mUsuario do NextCloud:\e[97m $user_nextcloud\e[0m" echo "" ## Informação sobre URL do nextcloud echo -e "\e[33mSenha do NextCloud:\e[97m $pass_nextcloud\e[0m" echo "" ## Pergunta se as respostas estão corretas read -p "As respostas estão corretas? (Y/N): " confirmacao if [ "$confirmacao" = "Y" ] || [ "$confirmacao" = "y" ]; then ## Digitou Y para confirmar que as informações estão corretas ## Limpar o terminal clear ## Mostrar mensagem de Instalando instalando_msg ## Sai do Loop break else ## Digitou N para dizer que as informações não estão corretas. ## Limpar o terminal clear ## Mostra o nome da ferramenta nome_minio ## Mostra mensagem para preencher informações preencha_as_info ## Volta para o inicio do loop com as perguntas fi done ## Mensagem de Passo echo -e "\e[97m• INICIANDO A INSTALAÇÃO DO NEXTCLOUD \e[33m[1/4]\e[0m" echo "" sleep 1 ## Nadaaaaa ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO/INSTALANDO POSTGRES E REIDS \e[33m[2/4]\e[0m" echo "" sleep 1 ## Cansei já de explicar o que isso faz kkkk verificar_container_postgres if [ $? -eq 0 ]; then sleep 1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_nextcloud #> /dev/null 2>&1 else ferramenta_postgres > /dev/null 2>&1 pegar_senha_postgres > /dev/null 2>&1 criar_banco_postgres_nextcloud #> /dev/null 2>&1 fi if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" fi verificar_container_redis if [ $? -eq 0 ]; then sleep 1 else ferramenta_redis > /dev/null 2>&1 fi if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" fi echo "" ## Mensagem de Passo echo -e "\e[97m• INSTALANDO NEXTCLOUD \e[33m[3/4]\e[0m" echo "" sleep 1 ## Criando a stack cat > nextcloud.yaml <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel Subir a stack do nextcloud" fi echo "" ## Mensagem de Passo echo -e "\e[97m• VERIFICANDO SERVIÇO \e[33m[4/4]\e[0m" echo "" sleep 1 ## Usa o serviço wait_nextcloud para verificar se o serviço esta online wait_nextcloud cd dados_vps cat > dados_nextcloud <
                              
                              /dev/null 2>&1 if [ $? -eq 0 ]; then echo "1/2 - [ OK ]" else echo "1/2 - [ OFF ]" echo "Não foi possivel reiniciar o portainer" fi docker service update --force $(docker service ls --filter name='portainer_portainer' -q) > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/2 - [ OK ]" else echo "2/2 - [ OFF ]" echo "Não foi possivel reiniciar o portainer" fi sleep 2 clear } chatwoot.nulled() { echo "" echo "Aguarde..." echo "" while :; do if docker ps -q --filter "name=postgres" | grep -q .; then CONTAINER_ID=$(docker ps -q --filter "name=postgres") docker exec -i "$CONTAINER_ID" psql -U postgres -d chatwoot -c \ "UPDATE public.installation_configs SET serialized_value = '\"--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nvalue: enterprise\n\"' WHERE name = 'INSTALLATION_PRICING_PLAN'; \ UPDATE public.installation_configs SET serialized_value = '\"--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nvalue: 200\n\"' WHERE name = 'INSTALLATION_PRICING_PLAN_QUANTITY';" if [ $? -eq 0 ]; then echo "1/1 - [ OK ]" else echo "1/1 - [ OFF ]" echo "Não foi possivel fazer isso, mude através do pgadmin." fi sleep 2 break else sleep 5 fi done } chatwoot.uno.nulled() { echo "" echo "Aguarde..." echo "" while :; do if docker ps -q --filter "name=postgres" | grep -q .; then CONTAINER_ID=$(docker ps -q --filter "name=postgres") docker exec -i "$CONTAINER_ID" psql -U postgres -d chatwoot_uno -c \ "UPDATE public.installation_configs SET serialized_value = '\"--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nvalue: enterprise\n\"' WHERE name = 'INSTALLATION_PRICING_PLAN'; \ UPDATE public.installation_configs SET serialized_value = '\"--- !ruby/hash:ActiveSupport::HashWithIndifferentAccess\nvalue: 200\n\"' WHERE name = 'INSTALLATION_PRICING_PLAN_QUANTITY';" if [ $? -eq 0 ]; then echo "1/1 - [ OK ]" else echo "1/1 - [ OFF ]" echo "Não foi possivel fazer isso, mude através do pgadmin." fi sleep 2 break else sleep 5 fi done } chatwoot.mail() { echo "" echo "Aguarde enquanto trocamos os emails..." echo "" cd /var/lib/docker/volumes/chatwoot_public_orion/_data/app/views/devise/mailer/ # Renomeia os arquivos mv password_change.html.erb password_change.html.erb.old > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "1/9 - [ OK ]" else echo "1/9 - [ OFF ]" echo "Não foi possivel mudar email." fi mv confirmation_instructions.html.erb confirmation_instructions.html.erb.old > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/9 - [ OK ]" else echo "2/9 - [ OFF ]" echo "Não foi possivel mudar email." fi mv reset_password_instructions.html.erb reset_password_instructions.html.erb.old > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "3/9 - [ OK ]" else echo "3/9 - [ OFF ]" echo "Não foi possivel mudar email." fi mv unlock_instructions.html.erb unlock_instructions.html.erb.old > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "4/9 - [ OK ]" else echo "4/9 - [ OFF ]" echo "Não foi possivel mudar email." fi # Baixa os novos arquivos wget -O confirmation_instructions.html.erb https://github.com/oriondesign2015/SetupOrion/raw/main/Extras/Chatwoot/emails/confirmation_instructions.html.erb > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "5/9 - [ OK ]" else echo "5/9 - [ OFF ]" echo "Não foi possivel baixar email." fi wget -O password_change.html.erb https://github.com/oriondesign2015/SetupOrion/raw/main/Extras/Chatwoot/emails/password_change.html.erb > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "6/9 - [ OK ]" else echo "6/9 - [ OFF ]" echo "Não foi possivel baixar email." fi wget -O reset_password_instructions.html.erb https://github.com/oriondesign2015/SetupOrion/raw/main/Extras/Chatwoot/emails/reset_password_instructions.html.erb > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "7/9 - [ OK ]" else echo "7/9 - [ OFF ]" echo "Não foi possivel baixar email." fi wget -O unlock_instructions.html.erb https://github.com/oriondesign2015/SetupOrion/raw/main/Extras/Chatwoot/emails/unlock_instructions.html.erb > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "8/9 - [ OK ]" else echo "8/9 - [ OFF ]" echo "Não foi possivel baixar email." fi cd cd # Deleta os containers do Chatwoot docker rm -f $(docker ps -a | grep 'chatwoot' | awk '{print $1}') > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "9/9 - [ OK ]" else echo "9/9 - [ OFF ]" echo "Não foi possivel deletar containers." fi echo "" echo "Esperando containers subir..." wait_30_sec echo "" echo "Concluido!" sleep 2 } n8n.workflows(){ while true; do if docker ps -q --filter "name=n8n_quepasa_n8n_quepasa_editor" | grep -q .; then # Capturar o ID do container container_id=$(docker ps --filter "name=n8n_quepasa_n8n_quepasa_editor" --format "{{.ID}}") # Verificar se o ID do container foi capturado corretamente if [ -z "$container_id" ]; then echo "Erro: Não foi possível encontrar o ID do contêiner." exit 1 fi # Executar o código no contêiner apenas se ele estiver em execução docker exec "$container_id" /bin/sh -c ' # Criando diretório temporário temp_dir=$(mktemp -d) # Entrando no diretório temporário cd "$temp_dir" # Baixando workflows wget "https://raw.githubusercontent.com/nocodeleaks/quepasa/main/extra/n8n%2Bchatwoot/ChatwootProfileUpdate.json" wget "https://raw.githubusercontent.com/oriondesign2015/SetupOrion/main/Extras/Quepasa/workflows_n8n/ChatwootToQuepasa.json" wget "https://raw.githubusercontent.com/nocodeleaks/quepasa/main/extra/n8n%2Bchatwoot/ChatwootToQuepasaGreetings.json" wget "https://raw.githubusercontent.com/oriondesign2015/SetupOrion/main/Extras/Quepasa/workflows_n8n/PostToChatwoot.json" wget "https://raw.githubusercontent.com/oriondesign2015/SetupOrion/main/Extras/Quepasa/workflows_n8n/QuepasaAutomatic.json" wget "https://raw.githubusercontent.com/nocodeleaks/quepasa/main/extra/n8n%2Bchatwoot/QuepasaChatControl.json" wget "https://raw.githubusercontent.com/nocodeleaks/quepasa/main/extra/n8n%2Bchatwoot/QuepasaInboxControl.json" wget "https://raw.githubusercontent.com/oriondesign2015/SetupOrion/main/Extras/Quepasa/workflows_n8n/QuepasaQrcode.json" wget "https://raw.githubusercontent.com/nocodeleaks/quepasa/main/extra/n8n%2Bchatwoot/QuepasaToChatwoot.json" wget "https://raw.githubusercontent.com/nocodeleaks/quepasa/main/extra/n8n%2Bchatwoot/GetChatwootContacts.json" wget "https://raw.githubusercontent.com/nocodeleaks/quepasa/main/extra/n8n%2Bchatwoot/PostToWebCallBack.json" # Subindo workflows n8n import:workflow --input="$temp_dir" --separate # Verificando se os workflows foram importados com sucesso if [ $? -eq 0 ]; then echo "Workflows importados com sucesso" else echo "Erro ao importar workflows" exit 1 fi # Ativando os workflows n8n update:workflow --id 1008 --active=true && echo "Fluxo 1008 ativado" || echo "Erro ao ativar fluxo 1008" n8n update:workflow --id 1009 --active=true && echo "Fluxo 1009 ativado" || echo "Erro ao ativar fluxo 1009" n8n update:workflow --id 1010 --active=true && echo "Fluxo 1010 ativado" || echo "Erro ao ativar fluxo 1010" n8n update:workflow --id 1011 --active=true && echo "Fluxo 1011 ativado" || echo "Erro ao ativar fluxo 1011" ' break else clear erro_msg echo "" echo -e "Oops, it looks like you didn't install the option \e[32m[6] N8N${reset} ${branco}do nosso instalador.${reset}" echo "Install before trying to install this application." echo "" echo "Pressione CTRL C para sair do instalador." sleep 5 exit fi done } portainer.reset() { cd clear nome_portainer.reset echo "Aguarde enquanto reseto a senha do portainer..." echo "" docker service scale portainer_portainer=0 > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "1/7 - [ OK ]" else echo "1/7 - [ OFF ]" echo "Ops, não foi possivel derrubar o serviço do portainer" fi docker pull portainer/helper-reset-password > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "2/7 - [ OK ]" else echo "2/7 - [ OFF ]" echo "Ops, não foi possivel super o serviço de reset password do portainer" fi script -c "docker run --rm -v /var/lib/docker/volumes/portainer_data/_data:/data portainer/helper-reset-password" output.txt > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "3/7 - [ OK ]" else echo "3/7 - [ OFF ]" echo "Ops, não foi possivel resetar a senha do portainer" fi cd docker stack deploy --prune --resolve-image always -c portainer.yaml portainer > /dev/null 2>&1 if [ $? -eq 0 ]; then echo "4/7 - [ OK ]" else echo "4/7 - [ OFF ]" echo "Ops, não foi possivel subir a stack do portainer" fi USER=$(grep -oP 'user: \K[^,]*' output.txt) if [ $? -eq 0 ]; then echo "5/7 - [ OK ]" else echo "5/7 - [ OFF ]" echo "Ops, não foi possivel pegar o usuario do portainer" fi PASSWORD=$(grep -oP 'login: \K.*' output.txt) if [ $? -eq 0 ]; then echo "6/7 - [ OK ]" else echo "6/7 - [ OFF ]" echo "Ops, não foi possivel pegar a senha do portainer" fi rm output.txt if [ $? -eq 0 ]; then echo "7/7 - [ OK ]" else echo "7/7 - [ OFF ]" echo "Ops, não foi possivel remover o arquivo output. txt ou ele não existe" fi echo "" sleep 3 clear nome_portainer.reset echo -e "\e[32m[ PORTAINER ]\e[0m" echo "" echo -e "\e[97mUsuario:\e[33m $USER\e[0m" echo "" echo -e "\e[97mNova Senha:\e[33m $PASSWORD\e[0m" echo "" ## Creditos do instalador creditos_msg read -p "Deseja voltar ao menu principal? (Y/N): " choice if [ "$choice" = "Y" ] || [ "$choice" = "y" ]; then return else cd cd clear exit 1 fi } #################################################### ## Iniciando instalador ## Mostrar nome do instalador nome_instalador ## Mostrar direitos do instalador direitos_instalador ##Após apetar Y e confirmar continua.. ## Menu de opções (backend) while true; do nome_menu menu_instalador read -p "Digite o NÚMERO da opção desejada: " opcao case $opcao in 0) ferramenta_testeemail ;; 1) ferramenta_traefik_e_portainer ;; 2) if verificar_docker_e_portainer_traefik; then ferramenta_chatwoot fi ;; 2.1) if verificar_docker_e_portainer_traefik; then ferramenta_chatwoot_arm fi ;; 3) if verificar_docker_e_portainer_traefik; then ferramenta_evolution fi ;; 3.1) if verificar_docker_e_portainer_traefik; then ferramenta_evolution_arm fi ;; 4) if verificar_docker_e_portainer_traefik; then ferramenta_minio fi ;; 5) if verificar_docker_e_portainer_traefik && verificar_antes_se_tem_minio; then ferramenta_typebot fi ;; 6) if verificar_docker_e_portainer_traefik; then ferramenta_n8n fi ;; 7) if verificar_docker_e_portainer_traefik; then ferramenta_flowise fi ;; 8) if verificar_docker_e_portainer_traefik; then ferramenta_pgAdmin_4 fi ;; 9) if verificar_docker_e_portainer_traefik; then ferramenta_nocobase fi ;; 10) if verificar_docker_e_portainer_traefik; then ferramenta_botpress fi ;; 11) if verificar_docker_e_portainer_traefik; then ferramenta_wordpress fi ;; 12) if verificar_docker_e_portainer_traefik; then ferramenta_baserow fi ;; 13) if verificar_docker_e_portainer_traefik; then ferramenta_mongodb fi ;; 14) if verificar_docker_e_portainer_traefik; then ferramenta_rabbitmq fi ;; 15) if verificar_docker_e_portainer_traefik; then ferramenta_uptimekuma fi ;; 16) if verificar_docker_e_portainer_traefik; then ferramenta_calcom fi ;; 17) if verificar_docker_e_portainer_traefik; then ferramenta_mautic fi ;; 18) if verificar_docker_e_portainer_traefik; then ferramenta_appsmith fi ;; 19) if verificar_docker_e_portainer_traefik; then ferramenta_qdrant fi ;; 20) if verificar_docker_e_portainer_traefik; then ferramenta_woofed fi ;; 21) if verificar_docker_e_portainer_traefik; then ferramenta_formbricks fi ;; 22) if verificar_docker_e_portainer_traefik; then ferramenta_nocodb fi ;; 23) if verificar_docker_e_portainer_traefik; then ferramenta_langfuse fi ;; 24) if verificar_docker_e_portainer_traefik; then ferramenta_metabase fi ;; 25) if verificar_docker_e_portainer_traefik; then ferramenta_odoo fi ;; 26) if verificar_docker_e_portainer_traefik; then ferramenta_chatwoot_nestor fi ;; 27) if verificar_docker_e_portainer_traefik && verificar_antes_se_tem_minio_e_rabbitmq_e_chatwoot; then ferramenta_unoapi fi ;; 28) if verificar_docker_e_portainer_traefik; then ferramenta_n8n_quepasa fi ;; 29) if verificar_docker_e_portainer_traefik; then ferramenta_quepasa fi ;; 30) if verificar_docker_e_portainer_traefik; then ferramenta_docuseal fi ;; 31) if verificar_docker_e_portainer_traefik; then ferramenta_monitor fi ;; 32) if verificar_docker_e_portainer_traefik && verificar_antes_se_tem_minio_e_qdrant; then ferramenta_dify fi ;; 33) if verificar_docker_e_portainer_traefik; then ferramenta_ollama fi ;; 34) if verificar_docker_e_portainer_traefik; then ferramenta_affine fi ;; 35) if verificar_docker_e_portainer_traefik && verificar_antes_se_tem_minio; then ferramenta_directus fi ;; 36) if verificar_docker_e_portainer_traefik; then ferramenta_vaultwarden fi ;; 37) if verificar_docker_e_portainer_traefik; then ferramenta_nextcloud fi ;; 38) if verificar_docker_e_portainer_traefik; then ferramenta_ fi ;; 39) if verificar_docker_e_portainer_traefik; then ferramenta_remover_stack fi ;; 40) clear nome_saindo echo "" break ;; 23a) ferramenta_remover_stack ;; 24a) echo "Saindo..." break ;; n8n.workflows) n8n.workflows ;; portainer.restart) portainer.restart ;; portainer.reset) portainer.reset ;; chatwoot.nulled) chatwoot.nulled ;; chatwoot.uno.nulled) chatwoot.uno.nulled ;; chatwoot.mail) chatwoot.mail ;; *) ;; esac echo "" done
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
                              
